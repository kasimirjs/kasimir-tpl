/**
 * Infracamp's Kasimir Templates
 *
 * A no-dependency render on request
 *
 * @author Matthias Leuffen <m@tth.es>
 */
class KT_Renderable extends HTMLElement{constructor(){super(),this.state={parentTpls:[]}}cloneNode(e){let t=this.state,r=super.cloneNode(e);return r.state=t,r}render(e){for(let t=0;t<this.state.parentTpls.length;t++)this.state.parentTpls[t].render(e)}}class KT_Template extends KT_Renderable{constructor(){super(),this.isRendered=!1}render(e){!1===this.isRendered&&(this.appendChild(this.origNode.cloneNode(!0)),this.isRendered=!0);for(let t=0;t<this.state.parentTpls.length;t++)this.state.parentTpls[t].render(e)}}customElements.define("x-kt-template",KT_Template);class KT_ForDirective extends KT_Renderable{constructor(){super()}static applies(e){return e.hasAttribute("ngFor")}static apply(e,t){t.getAttribute("ngFor");console.log(result)}render(e){let t=new RegExp("let (\\w+) of ([a-zA-Z0-9_.]+)"),r=(t=t.exec(this.state.ngFor))[2],s=t[1],n=e[r];console.log("render for",r,e,n);for(let e=this.state.parentTpls.length;e<n.length;e++){let e=this.state.origNode.cloneNode(!0);this.state.parentTpls.push(e),this.appendChild(e),console.log("append",e,this.state.parentTpls)}for(let t=0;t<n.length;t++)e[s]=n[t],e.idx=t,this.state.parentTpls[t].render(e);for(let e=this.state.parentTpls.length;e>n.length;e--){let e=this.state.parentTpls.pop();this.removeChild(e)}}}customElements.define("x-kt-for-directive",KT_ForDirective);class KT_ForElement extends KT_Renderable{constructor(){super(),console.log("Forelement construct"),this.isRendered=!1}render(e){super.render(e)}}customElements.define("x-kt-for-element",KT_ForElement);class Renderer{constructor(){this.directives=[KT_ForDirective]}_parse(e,t){let r=null,s=null;if(console.log("run",e),e.hasAttribute("ngFor")){s=e,e=e.cloneNode(!0),(r=new KT_ForDirective).state.ngFor=e.getAttribute("ngFor");let n=new KT_ForElement;n.appendChild(e),n.state.origNode=e,r.state.origNode=n,t.state.parentTpls.push(r),t=n}for(let r=0;r<e.children.length;r++)this._parse(e.children.item(r),t);null===r||s.replaceWith(r)}getTemplate(e){let t=new KT_Template;return t.origNode=e,this._parse(e,t),t}}
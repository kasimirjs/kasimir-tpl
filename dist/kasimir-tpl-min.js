/**
 * Infracamp's Kasimir Templates
 *
 * A no-dependency render on request
 *
 * @author Matthias Leuffen <m@tth.es>
 */
class KT_ForDirective extends KT_Renderable{constructor(e){super(e),this.ngFor=e.getAttribute("ngFor")}applies(e){return e.hasAttribute("ngFor")}render(e){super.render(e)}}export function kasimir_tpl(e){let t=null;if("string"==typeof e){if(null===(t=document.querySelector(e)))throw"kasimir_tpl(): can't find element '"+e+"'"}else{if(!(e instanceof HTMLElement))throw"kasimir_tpl(): parameter1 is not a HtmlElement";t=e}return(new KasimirRenderer).render(t)}class KT_Renderable extends HTMLElement{constructor(e){super(),this.origNode=e,this.parentTpls=[]}render(e){for(let t=0;t<this.parentTpls.length;t++)this.parentTpls[t].render(e)}}class KT_Template extends KT_Renderable{constructor(e){super(e),this.isRendered=!1}render(e){!1===this.isRendered&&$this.appendChild(this.origNode.cloneNode(!0));for(let t=0;t<this.parentTpls.length;t++)this.parentTpls[t].render(e)}}customElements.define("x-kt-template",KT_Template);class Renderer{constructor(){this.directives=[KT_ForDirective]}_parse(e,t){let r=null,n=null;console.log("run",e);for(let s=0;s<this.directives.length;s++){let l=this.directives[s];l.applies(e)&&(n=e,r=new l(e=e.cloneNode(!0)),t.parentTpls.push(r),t=r)}for(let r=0;r<e.children.length;r++)this._parse(e.children.item(r),t);null!==r&&n.replaceWith(r)}getTemplate(e){let t=new KT_Template(e);return this._parse(e,t),t}}
/**
 * Infracamp's Kasimir Templates
 *
 * A no-dependency render on request
 *
 * @author Matthias Leuffen <m@tth.es>
 */

class KT_Renderable extends HTMLElement
{


    constructor() {
        super();

        this.state = {
            parentTpls: []

        };

    }


    cloneNode(deep) {
        let state = this.state;
        let x = super.cloneNode(deep);
        x.state = state;
        return x;
    }

    render(scope) {
        for(let i = 0; i < this.state.parentTpls.length; i++) {
            this.state.parentTpls[i].render(scope);
        }
    }

}


class KT_Template extends KT_Renderable
{
    constructor() {
        super();
        this.isRendered = false;
    }

    render(scope) {
        if (this.isRendered === false) {
            this.appendChild(this.origNode.cloneNode(true));
            this.isRendered = true;
        }

        for(let i = 0; i < this.state.parentTpls.length; i++) {
            this.state.parentTpls[i].render(scope);
        }
    }

}

customElements.define("x-kt-template", KT_Template);
class KT_ForDirective extends KT_Renderable {

    constructor() {
        super();
    }

    static applies(node) {
        return node.hasAttribute("ngFor");
    }

    /**
     *
     * @param {this} instane
     * @param {HTMLElement} node
     */
    static apply (instane, node) {
        let stmt = node.getAttribute("ngFor");



        console.log(result);

    }

    render(scope) {
        let result = new RegExp("let (\\w+) of ([a-zA-Z0-9_.]+)");
        result = result.exec(this.state.ngFor);

        let selector = result[2];
        let target = result[1];

        let val = scope[selector];
        console.log("render for", selector, scope, val);
        // Create new elements
        for (let i = this.state.parentTpls.length; i < val.length; i++) {
            let e = this.state.origNode.cloneNode(true);

            this.state.parentTpls.push(e);
            this.appendChild(e);

            console.log("append", e, this.state.parentTpls);

        }
        for (let i = 0; i < val.length; i++) {
            scope[target] = val[i];
            scope["idx"] = i;
            this.state.parentTpls[i].render(scope);
        }

    }

}

customElements.define("x-kt-for-directive", KT_ForDirective);
class KT_ForElement extends KT_Renderable {

    constructor() {
        super();
        console.log("Forelement construct")
        this.isRendered = false;
    }

    render(scope) {
        //if (! this.isRendered) {
        //    this.appendChild(this.state.origNode.cloneNode(true));
        //    this.isRendered = true;
        //}
        super.render(scope);

    }

}

customElements.define("x-kt-for-element", KT_ForElement);


class Renderer {

    constructor() {
        /**
         *
         * @type {KT_ForDirective[]}
         */
        this.directives = [
            KT_ForDirective
        ]
    }


    /**
     *
     * @param {HTMLDivElement} node
     * @param {KT_Renderable} curTplElem
     * @private
     */
    _parse(node, curTplElem) {
        let tpl = null;
        let nodeOrig = null;
        console.log("run", node);


        if (node.hasAttribute("ngFor")) {
            nodeOrig = node;
            node = node.cloneNode(true);

            tpl = new KT_ForDirective();
            tpl.state.ngFor = node.getAttribute("ngFor");

            let elem = new KT_ForElement();
            elem.appendChild(node);
            elem.state.origNode = node;

            tpl.state.origNode = elem;

            curTplElem.state.parentTpls.push(tpl);
            curTplElem = elem;
        }


        for (let i=0; i < node.children.length; i++) {
            this._parse(node.children.item(i), curTplElem);
        }
        if (tpl === null) {

        } else {
            nodeOrig.replaceWith(tpl);
        }



    }

    /**
     *
     * @param templateNode
     * @return {KT_Template}
     */
    getTemplate(templateNode) {
        let tpl = new KT_Template();
        tpl.origNode = templateNode;
        this._parse(templateNode, tpl);
        return tpl;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUva3QtcmVuZGVyYWJsZS5qcyIsImNvcmUva3QtdGVtcGxhdGUuanMiLCJmb3ItZGlyZWN0aXZlLmpzIiwiZm9yLWVsZW1lbnQuanMiLCJyZW5kZXJlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDL0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNyREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJrYXNpbWlyLXRwbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuY2xhc3MgS1RfUmVuZGVyYWJsZSBleHRlbmRzIEhUTUxFbGVtZW50XG57XG5cblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBwYXJlbnRUcGxzOiBbXVxuXG4gICAgICAgIH07XG5cbiAgICB9XG5cblxuICAgIGNsb25lTm9kZShkZWVwKSB7XG4gICAgICAgIGxldCBzdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIGxldCB4ID0gc3VwZXIuY2xvbmVOb2RlKGRlZXApO1xuICAgICAgICB4LnN0YXRlID0gc3RhdGU7XG4gICAgICAgIHJldHVybiB4O1xuICAgIH1cblxuICAgIHJlbmRlcihzY29wZSkge1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5zdGF0ZS5wYXJlbnRUcGxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLnBhcmVudFRwbHNbaV0ucmVuZGVyKHNjb3BlKTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuXG4iLCJjbGFzcyBLVF9UZW1wbGF0ZSBleHRlbmRzIEtUX1JlbmRlcmFibGVcbntcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5pc1JlbmRlcmVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmVuZGVyKHNjb3BlKSB7XG4gICAgICAgIGlmICh0aGlzLmlzUmVuZGVyZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0aGlzLmFwcGVuZENoaWxkKHRoaXMub3JpZ05vZGUuY2xvbmVOb2RlKHRydWUpKTtcbiAgICAgICAgICAgIHRoaXMuaXNSZW5kZXJlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5zdGF0ZS5wYXJlbnRUcGxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLnBhcmVudFRwbHNbaV0ucmVuZGVyKHNjb3BlKTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJ4LWt0LXRlbXBsYXRlXCIsIEtUX1RlbXBsYXRlKTsiLCJjbGFzcyBLVF9Gb3JEaXJlY3RpdmUgZXh0ZW5kcyBLVF9SZW5kZXJhYmxlIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIHN0YXRpYyBhcHBsaWVzKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUuaGFzQXR0cmlidXRlKFwibmdGb3JcIik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3RoaXN9IGluc3RhbmVcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBub2RlXG4gICAgICovXG4gICAgc3RhdGljIGFwcGx5IChpbnN0YW5lLCBub2RlKSB7XG4gICAgICAgIGxldCBzdG10ID0gbm9kZS5nZXRBdHRyaWJ1dGUoXCJuZ0ZvclwiKTtcblxuXG5cbiAgICAgICAgY29uc29sZS5sb2cocmVzdWx0KTtcblxuICAgIH1cblxuICAgIHJlbmRlcihzY29wZSkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gbmV3IFJlZ0V4cChcImxldCAoXFxcXHcrKSBvZiAoW2EtekEtWjAtOV8uXSspXCIpO1xuICAgICAgICByZXN1bHQgPSByZXN1bHQuZXhlYyh0aGlzLnN0YXRlLm5nRm9yKTtcblxuICAgICAgICBsZXQgc2VsZWN0b3IgPSByZXN1bHRbMl07XG4gICAgICAgIGxldCB0YXJnZXQgPSByZXN1bHRbMV07XG5cbiAgICAgICAgbGV0IHZhbCA9IHNjb3BlW3NlbGVjdG9yXTtcbiAgICAgICAgY29uc29sZS5sb2coXCJyZW5kZXIgZm9yXCIsIHNlbGVjdG9yLCBzY29wZSwgdmFsKTtcbiAgICAgICAgLy8gQ3JlYXRlIG5ldyBlbGVtZW50c1xuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5zdGF0ZS5wYXJlbnRUcGxzLmxlbmd0aDsgaSA8IHZhbC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGUgPSB0aGlzLnN0YXRlLm9yaWdOb2RlLmNsb25lTm9kZSh0cnVlKTtcblxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5wYXJlbnRUcGxzLnB1c2goZSk7XG4gICAgICAgICAgICB0aGlzLmFwcGVuZENoaWxkKGUpO1xuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImFwcGVuZFwiLCBlLCB0aGlzLnN0YXRlLnBhcmVudFRwbHMpO1xuXG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWwubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHNjb3BlW3RhcmdldF0gPSB2YWxbaV07XG4gICAgICAgICAgICBzY29wZVtcImlkeFwiXSA9IGk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLnBhcmVudFRwbHNbaV0ucmVuZGVyKHNjb3BlKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59XG5cbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcIngta3QtZm9yLWRpcmVjdGl2ZVwiLCBLVF9Gb3JEaXJlY3RpdmUpOyIsImNsYXNzIEtUX0ZvckVsZW1lbnQgZXh0ZW5kcyBLVF9SZW5kZXJhYmxlIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIkZvcmVsZW1lbnQgY29uc3RydWN0XCIpXG4gICAgICAgIHRoaXMuaXNSZW5kZXJlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJlbmRlcihzY29wZSkge1xuICAgICAgICAvL2lmICghIHRoaXMuaXNSZW5kZXJlZCkge1xuICAgICAgICAvLyAgICB0aGlzLmFwcGVuZENoaWxkKHRoaXMuc3RhdGUub3JpZ05vZGUuY2xvbmVOb2RlKHRydWUpKTtcbiAgICAgICAgLy8gICAgdGhpcy5pc1JlbmRlcmVkID0gdHJ1ZTtcbiAgICAgICAgLy99XG4gICAgICAgIHN1cGVyLnJlbmRlcihzY29wZSk7XG5cbiAgICB9XG5cbn1cblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwieC1rdC1mb3ItZWxlbWVudFwiLCBLVF9Gb3JFbGVtZW50KTsiLCJcblxuY2xhc3MgUmVuZGVyZXIge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAdHlwZSB7S1RfRm9yRGlyZWN0aXZlW119XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRpcmVjdGl2ZXMgPSBbXG4gICAgICAgICAgICBLVF9Gb3JEaXJlY3RpdmVcbiAgICAgICAgXVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0hUTUxEaXZFbGVtZW50fSBub2RlXG4gICAgICogQHBhcmFtIHtLVF9SZW5kZXJhYmxlfSBjdXJUcGxFbGVtXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcGFyc2Uobm9kZSwgY3VyVHBsRWxlbSkge1xuICAgICAgICBsZXQgdHBsID0gbnVsbDtcbiAgICAgICAgbGV0IG5vZGVPcmlnID0gbnVsbDtcbiAgICAgICAgY29uc29sZS5sb2coXCJydW5cIiwgbm9kZSk7XG5cblxuICAgICAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGUoXCJuZ0ZvclwiKSkge1xuICAgICAgICAgICAgbm9kZU9yaWcgPSBub2RlO1xuICAgICAgICAgICAgbm9kZSA9IG5vZGUuY2xvbmVOb2RlKHRydWUpO1xuXG4gICAgICAgICAgICB0cGwgPSBuZXcgS1RfRm9yRGlyZWN0aXZlKCk7XG4gICAgICAgICAgICB0cGwuc3RhdGUubmdGb3IgPSBub2RlLmdldEF0dHJpYnV0ZShcIm5nRm9yXCIpO1xuXG4gICAgICAgICAgICBsZXQgZWxlbSA9IG5ldyBLVF9Gb3JFbGVtZW50KCk7XG4gICAgICAgICAgICBlbGVtLmFwcGVuZENoaWxkKG5vZGUpO1xuICAgICAgICAgICAgZWxlbS5zdGF0ZS5vcmlnTm9kZSA9IG5vZGU7XG5cbiAgICAgICAgICAgIHRwbC5zdGF0ZS5vcmlnTm9kZSA9IGVsZW07XG5cbiAgICAgICAgICAgIGN1clRwbEVsZW0uc3RhdGUucGFyZW50VHBscy5wdXNoKHRwbCk7XG4gICAgICAgICAgICBjdXJUcGxFbGVtID0gZWxlbTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgZm9yIChsZXQgaT0wOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5fcGFyc2Uobm9kZS5jaGlsZHJlbi5pdGVtKGkpLCBjdXJUcGxFbGVtKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHBsID09PSBudWxsKSB7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vZGVPcmlnLnJlcGxhY2VXaXRoKHRwbCk7XG4gICAgICAgIH1cblxuXG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB0ZW1wbGF0ZU5vZGVcbiAgICAgKiBAcmV0dXJuIHtLVF9UZW1wbGF0ZX1cbiAgICAgKi9cbiAgICBnZXRUZW1wbGF0ZSh0ZW1wbGF0ZU5vZGUpIHtcbiAgICAgICAgbGV0IHRwbCA9IG5ldyBLVF9UZW1wbGF0ZSgpO1xuICAgICAgICB0cGwub3JpZ05vZGUgPSB0ZW1wbGF0ZU5vZGU7XG4gICAgICAgIHRoaXMuX3BhcnNlKHRlbXBsYXRlTm9kZSwgdHBsKTtcbiAgICAgICAgcmV0dXJuIHRwbDtcbiAgICB9XG59Il19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUva3QtcmVuZGVyYWJsZS5qcyIsImNvcmUva3QtdGVtcGxhdGUuanMiLCJmb3ItZGlyZWN0aXZlLmpzIiwiZm9yLWVsZW1lbnQuanMiLCJyZW5kZXJlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDL0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNyREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJrYXNpbWlyLXRwbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuY2xhc3MgS1RfUmVuZGVyYWJsZSBleHRlbmRzIEhUTUxFbGVtZW50XG57XG5cblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBwYXJlbnRUcGxzOiBbXVxuXG4gICAgICAgIH07XG5cbiAgICB9XG5cblxuICAgIGNsb25lTm9kZShkZWVwKSB7XG4gICAgICAgIGxldCBzdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIGxldCB4ID0gc3VwZXIuY2xvbmVOb2RlKGRlZXApO1xuICAgICAgICB4LnN0YXRlID0gc3RhdGU7XG4gICAgICAgIHJldHVybiB4O1xuICAgIH1cblxuICAgIHJlbmRlcihzY29wZSkge1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5zdGF0ZS5wYXJlbnRUcGxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLnBhcmVudFRwbHNbaV0ucmVuZGVyKHNjb3BlKTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuXG4iLCJjbGFzcyBLVF9UZW1wbGF0ZSBleHRlbmRzIEtUX1JlbmRlcmFibGVcbntcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5pc1JlbmRlcmVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmVuZGVyKHNjb3BlKSB7XG4gICAgICAgIGlmICh0aGlzLmlzUmVuZGVyZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0aGlzLmFwcGVuZENoaWxkKHRoaXMub3JpZ05vZGUuY2xvbmVOb2RlKHRydWUpKTtcbiAgICAgICAgICAgIHRoaXMuaXNSZW5kZXJlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5zdGF0ZS5wYXJlbnRUcGxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLnBhcmVudFRwbHNbaV0ucmVuZGVyKHNjb3BlKTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJ4LWt0LXRlbXBsYXRlXCIsIEtUX1RlbXBsYXRlKTsiLCJjbGFzcyBLVF9Gb3JEaXJlY3RpdmUgZXh0ZW5kcyBLVF9SZW5kZXJhYmxlIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIHN0YXRpYyBhcHBsaWVzKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUuaGFzQXR0cmlidXRlKFwibmdGb3JcIik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3RoaXN9IGluc3RhbmVcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBub2RlXG4gICAgICovXG4gICAgc3RhdGljIGFwcGx5IChpbnN0YW5lLCBub2RlKSB7XG4gICAgICAgIGxldCBzdG10ID0gbm9kZS5nZXRBdHRyaWJ1dGUoXCJuZ0ZvclwiKTtcblxuXG5cbiAgICAgICAgY29uc29sZS5sb2cocmVzdWx0KTtcblxuICAgIH1cblxuICAgIHJlbmRlcihzY29wZSkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gbmV3IFJlZ0V4cChcImxldCAoXFxcXHcrKSBvZiAoW2EtekEtWjAtOV8uXSspXCIpO1xuICAgICAgICByZXN1bHQgPSByZXN1bHQuZXhlYyh0aGlzLnN0YXRlLm5nRm9yKTtcblxuICAgICAgICBsZXQgc2VsZWN0b3IgPSByZXN1bHRbMl07XG4gICAgICAgIGxldCB0YXJnZXQgPSByZXN1bHRbMV07XG5cbiAgICAgICAgbGV0IHZhbCA9IHNjb3BlW3NlbGVjdG9yXTtcbiAgICAgICAgY29uc29sZS5sb2coXCJyZW5kZXIgZm9yXCIsIHNlbGVjdG9yLCBzY29wZSwgdmFsKTtcbiAgICAgICAgLy8gQ3JlYXRlIG5ldyBlbGVtZW50c1xuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5zdGF0ZS5wYXJlbnRUcGxzLmxlbmd0aDsgaSA8IHZhbC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGUgPSB0aGlzLnN0YXRlLm9yaWdOb2RlLmNsb25lTm9kZSh0cnVlKTtcblxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5wYXJlbnRUcGxzLnB1c2goZSk7XG4gICAgICAgICAgICB0aGlzLmFwcGVuZENoaWxkKGUpO1xuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImFwcGVuZFwiLCBlLCB0aGlzLnN0YXRlLnBhcmVudFRwbHMpO1xuXG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWwubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHNjb3BlW3RhcmdldF0gPSB2YWxbaV07XG4gICAgICAgICAgICBzY29wZVtcImlkeFwiXSA9IGk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLnBhcmVudFRwbHNbaV0ucmVuZGVyKHNjb3BlKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG59XG5cbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcIngta3QtZm9yLWRpcmVjdGl2ZVwiLCBLVF9Gb3JEaXJlY3RpdmUpOyIsImNsYXNzIEtUX0ZvckVsZW1lbnQgZXh0ZW5kcyBLVF9SZW5kZXJhYmxlIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIkZvcmVsZW1lbnQgY29uc3RydWN0XCIpXG4gICAgICAgIHRoaXMuaXNSZW5kZXJlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJlbmRlcihzY29wZSkge1xuICAgICAgICAvL2lmICghIHRoaXMuaXNSZW5kZXJlZCkge1xuICAgICAgICAvLyAgICB0aGlzLmFwcGVuZENoaWxkKHRoaXMuc3RhdGUub3JpZ05vZGUuY2xvbmVOb2RlKHRydWUpKTtcbiAgICAgICAgLy8gICAgdGhpcy5pc1JlbmRlcmVkID0gdHJ1ZTtcbiAgICAgICAgLy99XG4gICAgICAgIHN1cGVyLnJlbmRlcihzY29wZSk7XG5cbiAgICB9XG5cbn1cblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwieC1rdC1mb3ItZWxlbWVudFwiLCBLVF9Gb3JFbGVtZW50KTsiLCJcblxuY2xhc3MgUmVuZGVyZXIge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAdHlwZSB7S1RfRm9yRGlyZWN0aXZlW119XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRpcmVjdGl2ZXMgPSBbXG4gICAgICAgICAgICBLVF9Gb3JEaXJlY3RpdmVcbiAgICAgICAgXVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0hUTUxEaXZFbGVtZW50fSBub2RlXG4gICAgICogQHBhcmFtIHtLVF9SZW5kZXJhYmxlfSBjdXJUcGxFbGVtXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcGFyc2Uobm9kZSwgY3VyVHBsRWxlbSkge1xuICAgICAgICBsZXQgdHBsID0gbnVsbDtcbiAgICAgICAgbGV0IG5vZGVPcmlnID0gbnVsbDtcbiAgICAgICAgY29uc29sZS5sb2coXCJydW5cIiwgbm9kZSk7XG5cblxuICAgICAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGUoXCJuZ0ZvclwiKSkge1xuICAgICAgICAgICAgbm9kZU9yaWcgPSBub2RlO1xuICAgICAgICAgICAgbm9kZSA9IG5vZGUuY2xvbmVOb2RlKHRydWUpO1xuXG4gICAgICAgICAgICB0cGwgPSBuZXcgS1RfRm9yRGlyZWN0aXZlKCk7XG4gICAgICAgICAgICB0cGwuc3RhdGUubmdGb3IgPSBub2RlLmdldEF0dHJpYnV0ZShcIm5nRm9yXCIpO1xuXG4gICAgICAgICAgICBsZXQgZWxlbSA9IG5ldyBLVF9Gb3JFbGVtZW50KCk7XG4gICAgICAgICAgICBlbGVtLmFwcGVuZENoaWxkKG5vZGUpO1xuICAgICAgICAgICAgZWxlbS5zdGF0ZS5vcmlnTm9kZSA9IG5vZGU7XG5cbiAgICAgICAgICAgIHRwbC5zdGF0ZS5vcmlnTm9kZSA9IGVsZW07XG5cbiAgICAgICAgICAgIGN1clRwbEVsZW0uc3RhdGUucGFyZW50VHBscy5wdXNoKHRwbCk7XG4gICAgICAgICAgICBjdXJUcGxFbGVtID0gZWxlbTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgZm9yIChsZXQgaT0wOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5fcGFyc2Uobm9kZS5jaGlsZHJlbi5pdGVtKGkpLCBjdXJUcGxFbGVtKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHBsID09PSBudWxsKSB7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vZGVPcmlnLnJlcGxhY2VXaXRoKHRwbCk7XG4gICAgICAgIH1cblxuXG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB0ZW1wbGF0ZU5vZGVcbiAgICAgKiBAcmV0dXJuIHtLVF9UZW1wbGF0ZX1cbiAgICAgKi9cbiAgICBnZXRUZW1wbGF0ZSh0ZW1wbGF0ZU5vZGUpIHtcbiAgICAgICAgbGV0IHRwbCA9IG5ldyBLVF9UZW1wbGF0ZSgpO1xuICAgICAgICB0cGwub3JpZ05vZGUgPSB0ZW1wbGF0ZU5vZGU7XG4gICAgICAgIHRoaXMuX3BhcnNlKHRlbXBsYXRlTm9kZSwgdHBsKTtcbiAgICAgICAgcmV0dXJuIHRwbDtcbiAgICB9XG59Il19
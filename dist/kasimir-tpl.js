/**
 * Infracamp's Kasimir Templates
 *
 * A no-dependency render on request
 *
 * @author Matthias Leuffen <m@tth.es>
 */

class KT_Renderable extends HTMLElement
{


    constructor() {
        super();

        this.state = {
            parentTpls: []

        };

    }


    cloneNode(deep) {
        let state = this.state;
        let x = super.cloneNode(deep);
        x.state = state;
        return x;
    }

    render(scope) {
        for(let i = 0; i < this.state.parentTpls.length; i++) {
            this.state.parentTpls[i].render(scope);
        }
    }

}


class KT_Template extends KT_Renderable
{
    constructor() {
        super();
        this.isRendered = false;
    }

    render(scope) {
        if (this.isRendered === false) {
            this.appendChild(this.origNode.cloneNode(true));
            this.isRendered = true;
        }

        for(let i = 0; i < this.state.parentTpls.length; i++) {
            this.state.parentTpls[i].render(scope);
        }
    }

}

customElements.define("x-kt-template", KT_Template);
class KT_ForDirective extends KT_Renderable {

    constructor() {
        super();
    }

    static applies(node) {
        return node.hasAttribute("ngFor");
    }

    /**
     *
     * @param {this} instane
     * @param {HTMLElement} node
     */
    static apply (instane, node) {
        let stmt = node.getAttribute("ngFor");



        console.log(result);

    }

    render(scope) {
        let result = new RegExp("let (\\w+) of ([a-zA-Z0-9_.]+)");
        result = result.exec(this.state.ngFor);

        let selector = result[2];
        let target = result[1];

        let val = scope[selector];
        console.log("render for", selector, scope, val);
        // Create new elements
        for (let i = this.state.parentTpls.length; i < val.length; i++) {
            let e = this.state.origNode.cloneNode(true);

            this.state.parentTpls.push(e);
            this.appendChild(e);

            console.log("append", e, this.state.parentTpls);

        }
        for (let i = 0; i < val.length; i++) {
            scope[target] = val[i];
            scope["idx"] = i;
            this.state.parentTpls[i].render(scope);
        }
        for (let i = this.state.parentTpls.length; i > val.length; i--) {
            let c = this.state.parentTpls.pop();
            this.removeChild(c);
        }

    }

}

customElements.define("x-kt-for-directive", KT_ForDirective);
class KT_ForElement extends KT_Renderable {

    constructor() {
        super();
        console.log("Forelement construct")
        this.isRendered = false;
    }

    render(scope) {
        //if (! this.isRendered) {
        //    this.appendChild(this.state.origNode.cloneNode(true));
        //    this.isRendered = true;
        //}
        super.render(scope);

    }

}

customElements.define("x-kt-for-element", KT_ForElement);


class Renderer {

    constructor() {
        /**
         *
         * @type {KT_ForDirective[]}
         */
        this.directives = [
            KT_ForDirective
        ]
    }


    /**
     *
     * @param {HTMLDivElement} node
     * @param {KT_Renderable} curTplElem
     * @private
     */
    _parse(node, curTplElem) {
        let tpl = null;
        let nodeOrig = null;
        console.log("run", node);


        if (node.hasAttribute("ngFor")) {
            nodeOrig = node;
            node = node.cloneNode(true);

            tpl = new KT_ForDirective();
            tpl.state.ngFor = node.getAttribute("ngFor");

            let elem = new KT_ForElement();
            elem.appendChild(node);
            elem.state.origNode = node;

            tpl.state.origNode = elem;

            curTplElem.state.parentTpls.push(tpl);
            curTplElem = elem;
        }


        for (let i=0; i < node.children.length; i++) {
            this._parse(node.children.item(i), curTplElem);
        }
        if (tpl === null) {

        } else {
            nodeOrig.replaceWith(tpl);
        }



    }

    /**
     *
     * @param templateNode
     * @return {KT_Template}
     */
    getTemplate(templateNode) {
        let tpl = new KT_Template();
        tpl.origNode = templateNode;
        this._parse(templateNode, tpl);
        return tpl;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUva3QtcmVuZGVyYWJsZS5qcyIsImNvcmUva3QtdGVtcGxhdGUuanMiLCJmb3ItZGlyZWN0aXZlLmpzIiwiZm9yLWVsZW1lbnQuanMiLCJyZW5kZXJlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDL0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Imthc2ltaXItdHBsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5jbGFzcyBLVF9SZW5kZXJhYmxlIGV4dGVuZHMgSFRNTEVsZW1lbnRcbntcblxuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHBhcmVudFRwbHM6IFtdXG5cbiAgICAgICAgfTtcblxuICAgIH1cblxuXG4gICAgY2xvbmVOb2RlKGRlZXApIHtcbiAgICAgICAgbGV0IHN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgbGV0IHggPSBzdXBlci5jbG9uZU5vZGUoZGVlcCk7XG4gICAgICAgIHguc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgfVxuXG4gICAgcmVuZGVyKHNjb3BlKSB7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLnN0YXRlLnBhcmVudFRwbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUucGFyZW50VHBsc1tpXS5yZW5kZXIoc2NvcGUpO1xuICAgICAgICB9XG4gICAgfVxuXG59XG5cbiIsImNsYXNzIEtUX1RlbXBsYXRlIGV4dGVuZHMgS1RfUmVuZGVyYWJsZVxue1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmlzUmVuZGVyZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZW5kZXIoc2NvcGUpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNSZW5kZXJlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQodGhpcy5vcmlnTm9kZS5jbG9uZU5vZGUodHJ1ZSkpO1xuICAgICAgICAgICAgdGhpcy5pc1JlbmRlcmVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLnN0YXRlLnBhcmVudFRwbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUucGFyZW50VHBsc1tpXS5yZW5kZXIoc2NvcGUpO1xuICAgICAgICB9XG4gICAgfVxuXG59XG5cbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcIngta3QtdGVtcGxhdGVcIiwgS1RfVGVtcGxhdGUpOyIsImNsYXNzIEtUX0ZvckRpcmVjdGl2ZSBleHRlbmRzIEtUX1JlbmRlcmFibGUge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGFwcGxpZXMobm9kZSkge1xuICAgICAgICByZXR1cm4gbm9kZS5oYXNBdHRyaWJ1dGUoXCJuZ0ZvclwiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7dGhpc30gaW5zdGFuZVxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5vZGVcbiAgICAgKi9cbiAgICBzdGF0aWMgYXBwbHkgKGluc3RhbmUsIG5vZGUpIHtcbiAgICAgICAgbGV0IHN0bXQgPSBub2RlLmdldEF0dHJpYnV0ZShcIm5nRm9yXCIpO1xuXG5cblxuICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xuXG4gICAgfVxuXG4gICAgcmVuZGVyKHNjb3BlKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBuZXcgUmVnRXhwKFwibGV0IChcXFxcdyspIG9mIChbYS16QS1aMC05Xy5dKylcIik7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5leGVjKHRoaXMuc3RhdGUubmdGb3IpO1xuXG4gICAgICAgIGxldCBzZWxlY3RvciA9IHJlc3VsdFsyXTtcbiAgICAgICAgbGV0IHRhcmdldCA9IHJlc3VsdFsxXTtcblxuICAgICAgICBsZXQgdmFsID0gc2NvcGVbc2VsZWN0b3JdO1xuICAgICAgICBjb25zb2xlLmxvZyhcInJlbmRlciBmb3JcIiwgc2VsZWN0b3IsIHNjb3BlLCB2YWwpO1xuICAgICAgICAvLyBDcmVhdGUgbmV3IGVsZW1lbnRzXG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLnN0YXRlLnBhcmVudFRwbHMubGVuZ3RoOyBpIDwgdmFsLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgZSA9IHRoaXMuc3RhdGUub3JpZ05vZGUuY2xvbmVOb2RlKHRydWUpO1xuXG4gICAgICAgICAgICB0aGlzLnN0YXRlLnBhcmVudFRwbHMucHVzaChlKTtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQoZSk7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiYXBwZW5kXCIsIGUsIHRoaXMuc3RhdGUucGFyZW50VHBscyk7XG5cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgc2NvcGVbdGFyZ2V0XSA9IHZhbFtpXTtcbiAgICAgICAgICAgIHNjb3BlW1wiaWR4XCJdID0gaTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUucGFyZW50VHBsc1tpXS5yZW5kZXIoc2NvcGUpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLnN0YXRlLnBhcmVudFRwbHMubGVuZ3RoOyBpID4gdmFsLmxlbmd0aDsgaS0tKSB7XG4gICAgICAgICAgICBsZXQgYyA9IHRoaXMuc3RhdGUucGFyZW50VHBscy5wb3AoKTtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQ2hpbGQoYyk7XG4gICAgICAgIH1cblxuICAgIH1cblxufVxuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJ4LWt0LWZvci1kaXJlY3RpdmVcIiwgS1RfRm9yRGlyZWN0aXZlKTsiLCJjbGFzcyBLVF9Gb3JFbGVtZW50IGV4dGVuZHMgS1RfUmVuZGVyYWJsZSB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJGb3JlbGVtZW50IGNvbnN0cnVjdFwiKVxuICAgICAgICB0aGlzLmlzUmVuZGVyZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZW5kZXIoc2NvcGUpIHtcbiAgICAgICAgLy9pZiAoISB0aGlzLmlzUmVuZGVyZWQpIHtcbiAgICAgICAgLy8gICAgdGhpcy5hcHBlbmRDaGlsZCh0aGlzLnN0YXRlLm9yaWdOb2RlLmNsb25lTm9kZSh0cnVlKSk7XG4gICAgICAgIC8vICAgIHRoaXMuaXNSZW5kZXJlZCA9IHRydWU7XG4gICAgICAgIC8vfVxuICAgICAgICBzdXBlci5yZW5kZXIoc2NvcGUpO1xuXG4gICAgfVxuXG59XG5cbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcIngta3QtZm9yLWVsZW1lbnRcIiwgS1RfRm9yRWxlbWVudCk7IiwiXG5cbmNsYXNzIFJlbmRlcmVyIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHR5cGUge0tUX0ZvckRpcmVjdGl2ZVtdfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kaXJlY3RpdmVzID0gW1xuICAgICAgICAgICAgS1RfRm9yRGlyZWN0aXZlXG4gICAgICAgIF1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtIVE1MRGl2RWxlbWVudH0gbm9kZVxuICAgICAqIEBwYXJhbSB7S1RfUmVuZGVyYWJsZX0gY3VyVHBsRWxlbVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3BhcnNlKG5vZGUsIGN1clRwbEVsZW0pIHtcbiAgICAgICAgbGV0IHRwbCA9IG51bGw7XG4gICAgICAgIGxldCBub2RlT3JpZyA9IG51bGw7XG4gICAgICAgIGNvbnNvbGUubG9nKFwicnVuXCIsIG5vZGUpO1xuXG5cbiAgICAgICAgaWYgKG5vZGUuaGFzQXR0cmlidXRlKFwibmdGb3JcIikpIHtcbiAgICAgICAgICAgIG5vZGVPcmlnID0gbm9kZTtcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLmNsb25lTm9kZSh0cnVlKTtcblxuICAgICAgICAgICAgdHBsID0gbmV3IEtUX0ZvckRpcmVjdGl2ZSgpO1xuICAgICAgICAgICAgdHBsLnN0YXRlLm5nRm9yID0gbm9kZS5nZXRBdHRyaWJ1dGUoXCJuZ0ZvclwiKTtcblxuICAgICAgICAgICAgbGV0IGVsZW0gPSBuZXcgS1RfRm9yRWxlbWVudCgpO1xuICAgICAgICAgICAgZWxlbS5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgICAgICAgIGVsZW0uc3RhdGUub3JpZ05vZGUgPSBub2RlO1xuXG4gICAgICAgICAgICB0cGwuc3RhdGUub3JpZ05vZGUgPSBlbGVtO1xuXG4gICAgICAgICAgICBjdXJUcGxFbGVtLnN0YXRlLnBhcmVudFRwbHMucHVzaCh0cGwpO1xuICAgICAgICAgICAgY3VyVHBsRWxlbSA9IGVsZW07XG4gICAgICAgIH1cblxuXG4gICAgICAgIGZvciAobGV0IGk9MDsgaSA8IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuX3BhcnNlKG5vZGUuY2hpbGRyZW4uaXRlbShpKSwgY3VyVHBsRWxlbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRwbCA9PT0gbnVsbCkge1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub2RlT3JpZy5yZXBsYWNlV2l0aCh0cGwpO1xuICAgICAgICB9XG5cblxuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGVtcGxhdGVOb2RlXG4gICAgICogQHJldHVybiB7S1RfVGVtcGxhdGV9XG4gICAgICovXG4gICAgZ2V0VGVtcGxhdGUodGVtcGxhdGVOb2RlKSB7XG4gICAgICAgIGxldCB0cGwgPSBuZXcgS1RfVGVtcGxhdGUoKTtcbiAgICAgICAgdHBsLm9yaWdOb2RlID0gdGVtcGxhdGVOb2RlO1xuICAgICAgICB0aGlzLl9wYXJzZSh0ZW1wbGF0ZU5vZGUsIHRwbCk7XG4gICAgICAgIHJldHVybiB0cGw7XG4gICAgfVxufSJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUva3QtcmVuZGVyYWJsZS5qcyIsImNvcmUva3QtdGVtcGxhdGUuanMiLCJmb3ItZGlyZWN0aXZlLmpzIiwiZm9yLWVsZW1lbnQuanMiLCJyZW5kZXJlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDL0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Imthc2ltaXItdHBsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5jbGFzcyBLVF9SZW5kZXJhYmxlIGV4dGVuZHMgSFRNTEVsZW1lbnRcbntcblxuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHBhcmVudFRwbHM6IFtdXG5cbiAgICAgICAgfTtcblxuICAgIH1cblxuXG4gICAgY2xvbmVOb2RlKGRlZXApIHtcbiAgICAgICAgbGV0IHN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgbGV0IHggPSBzdXBlci5jbG9uZU5vZGUoZGVlcCk7XG4gICAgICAgIHguc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgfVxuXG4gICAgcmVuZGVyKHNjb3BlKSB7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLnN0YXRlLnBhcmVudFRwbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUucGFyZW50VHBsc1tpXS5yZW5kZXIoc2NvcGUpO1xuICAgICAgICB9XG4gICAgfVxuXG59XG5cbiIsImNsYXNzIEtUX1RlbXBsYXRlIGV4dGVuZHMgS1RfUmVuZGVyYWJsZVxue1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmlzUmVuZGVyZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZW5kZXIoc2NvcGUpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNSZW5kZXJlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQodGhpcy5vcmlnTm9kZS5jbG9uZU5vZGUodHJ1ZSkpO1xuICAgICAgICAgICAgdGhpcy5pc1JlbmRlcmVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLnN0YXRlLnBhcmVudFRwbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUucGFyZW50VHBsc1tpXS5yZW5kZXIoc2NvcGUpO1xuICAgICAgICB9XG4gICAgfVxuXG59XG5cbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcIngta3QtdGVtcGxhdGVcIiwgS1RfVGVtcGxhdGUpOyIsImNsYXNzIEtUX0ZvckRpcmVjdGl2ZSBleHRlbmRzIEtUX1JlbmRlcmFibGUge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGFwcGxpZXMobm9kZSkge1xuICAgICAgICByZXR1cm4gbm9kZS5oYXNBdHRyaWJ1dGUoXCJuZ0ZvclwiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7dGhpc30gaW5zdGFuZVxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5vZGVcbiAgICAgKi9cbiAgICBzdGF0aWMgYXBwbHkgKGluc3RhbmUsIG5vZGUpIHtcbiAgICAgICAgbGV0IHN0bXQgPSBub2RlLmdldEF0dHJpYnV0ZShcIm5nRm9yXCIpO1xuXG5cblxuICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xuXG4gICAgfVxuXG4gICAgcmVuZGVyKHNjb3BlKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBuZXcgUmVnRXhwKFwibGV0IChcXFxcdyspIG9mIChbYS16QS1aMC05Xy5dKylcIik7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5leGVjKHRoaXMuc3RhdGUubmdGb3IpO1xuXG4gICAgICAgIGxldCBzZWxlY3RvciA9IHJlc3VsdFsyXTtcbiAgICAgICAgbGV0IHRhcmdldCA9IHJlc3VsdFsxXTtcblxuICAgICAgICBsZXQgdmFsID0gc2NvcGVbc2VsZWN0b3JdO1xuICAgICAgICBjb25zb2xlLmxvZyhcInJlbmRlciBmb3JcIiwgc2VsZWN0b3IsIHNjb3BlLCB2YWwpO1xuICAgICAgICAvLyBDcmVhdGUgbmV3IGVsZW1lbnRzXG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLnN0YXRlLnBhcmVudFRwbHMubGVuZ3RoOyBpIDwgdmFsLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgZSA9IHRoaXMuc3RhdGUub3JpZ05vZGUuY2xvbmVOb2RlKHRydWUpO1xuXG4gICAgICAgICAgICB0aGlzLnN0YXRlLnBhcmVudFRwbHMucHVzaChlKTtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQoZSk7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiYXBwZW5kXCIsIGUsIHRoaXMuc3RhdGUucGFyZW50VHBscyk7XG5cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgc2NvcGVbdGFyZ2V0XSA9IHZhbFtpXTtcbiAgICAgICAgICAgIHNjb3BlW1wiaWR4XCJdID0gaTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUucGFyZW50VHBsc1tpXS5yZW5kZXIoc2NvcGUpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLnN0YXRlLnBhcmVudFRwbHMubGVuZ3RoOyBpID4gdmFsLmxlbmd0aDsgaS0tKSB7XG4gICAgICAgICAgICBsZXQgYyA9IHRoaXMuc3RhdGUucGFyZW50VHBscy5wb3AoKTtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQ2hpbGQoYyk7XG4gICAgICAgIH1cblxuICAgIH1cblxufVxuXG5jdXN0b21FbGVtZW50cy5kZWZpbmUoXCJ4LWt0LWZvci1kaXJlY3RpdmVcIiwgS1RfRm9yRGlyZWN0aXZlKTsiLCJjbGFzcyBLVF9Gb3JFbGVtZW50IGV4dGVuZHMgS1RfUmVuZGVyYWJsZSB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJGb3JlbGVtZW50IGNvbnN0cnVjdFwiKVxuICAgICAgICB0aGlzLmlzUmVuZGVyZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZW5kZXIoc2NvcGUpIHtcbiAgICAgICAgLy9pZiAoISB0aGlzLmlzUmVuZGVyZWQpIHtcbiAgICAgICAgLy8gICAgdGhpcy5hcHBlbmRDaGlsZCh0aGlzLnN0YXRlLm9yaWdOb2RlLmNsb25lTm9kZSh0cnVlKSk7XG4gICAgICAgIC8vICAgIHRoaXMuaXNSZW5kZXJlZCA9IHRydWU7XG4gICAgICAgIC8vfVxuICAgICAgICBzdXBlci5yZW5kZXIoc2NvcGUpO1xuXG4gICAgfVxuXG59XG5cbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcIngta3QtZm9yLWVsZW1lbnRcIiwgS1RfRm9yRWxlbWVudCk7IiwiXG5cbmNsYXNzIFJlbmRlcmVyIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHR5cGUge0tUX0ZvckRpcmVjdGl2ZVtdfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kaXJlY3RpdmVzID0gW1xuICAgICAgICAgICAgS1RfRm9yRGlyZWN0aXZlXG4gICAgICAgIF1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtIVE1MRGl2RWxlbWVudH0gbm9kZVxuICAgICAqIEBwYXJhbSB7S1RfUmVuZGVyYWJsZX0gY3VyVHBsRWxlbVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3BhcnNlKG5vZGUsIGN1clRwbEVsZW0pIHtcbiAgICAgICAgbGV0IHRwbCA9IG51bGw7XG4gICAgICAgIGxldCBub2RlT3JpZyA9IG51bGw7XG4gICAgICAgIGNvbnNvbGUubG9nKFwicnVuXCIsIG5vZGUpO1xuXG5cbiAgICAgICAgaWYgKG5vZGUuaGFzQXR0cmlidXRlKFwibmdGb3JcIikpIHtcbiAgICAgICAgICAgIG5vZGVPcmlnID0gbm9kZTtcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLmNsb25lTm9kZSh0cnVlKTtcblxuICAgICAgICAgICAgdHBsID0gbmV3IEtUX0ZvckRpcmVjdGl2ZSgpO1xuICAgICAgICAgICAgdHBsLnN0YXRlLm5nRm9yID0gbm9kZS5nZXRBdHRyaWJ1dGUoXCJuZ0ZvclwiKTtcblxuICAgICAgICAgICAgbGV0IGVsZW0gPSBuZXcgS1RfRm9yRWxlbWVudCgpO1xuICAgICAgICAgICAgZWxlbS5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgICAgICAgIGVsZW0uc3RhdGUub3JpZ05vZGUgPSBub2RlO1xuXG4gICAgICAgICAgICB0cGwuc3RhdGUub3JpZ05vZGUgPSBlbGVtO1xuXG4gICAgICAgICAgICBjdXJUcGxFbGVtLnN0YXRlLnBhcmVudFRwbHMucHVzaCh0cGwpO1xuICAgICAgICAgICAgY3VyVHBsRWxlbSA9IGVsZW07XG4gICAgICAgIH1cblxuXG4gICAgICAgIGZvciAobGV0IGk9MDsgaSA8IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuX3BhcnNlKG5vZGUuY2hpbGRyZW4uaXRlbShpKSwgY3VyVHBsRWxlbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRwbCA9PT0gbnVsbCkge1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub2RlT3JpZy5yZXBsYWNlV2l0aCh0cGwpO1xuICAgICAgICB9XG5cblxuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGVtcGxhdGVOb2RlXG4gICAgICogQHJldHVybiB7S1RfVGVtcGxhdGV9XG4gICAgICovXG4gICAgZ2V0VGVtcGxhdGUodGVtcGxhdGVOb2RlKSB7XG4gICAgICAgIGxldCB0cGwgPSBuZXcgS1RfVGVtcGxhdGUoKTtcbiAgICAgICAgdHBsLm9yaWdOb2RlID0gdGVtcGxhdGVOb2RlO1xuICAgICAgICB0aGlzLl9wYXJzZSh0ZW1wbGF0ZU5vZGUsIHRwbCk7XG4gICAgICAgIHJldHVybiB0cGw7XG4gICAgfVxufSJdfQ==
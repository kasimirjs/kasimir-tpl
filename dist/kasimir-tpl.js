/**
 * Infracamp's Kasimir Templates
 *
 * A no-dependency render on request
 *
 * @author Matthias Leuffen <m@tth.es>
 */

class KT_Renderable extends HTMLElement
{
    constructor() {
        super();
        this.state = {
            origNode: null
        };

    }

    /**
     *
     * @param {HTMLElement} node
     * @param scope
     */
    renderRecursive(node, scope){
        if ( ! node.hasChildNodes())
            return;
        // console.log("renderRecursive", node);
        for (let curNode of node.childNodes) {

            if (typeof curNode.render === "function") {
                curNode.render(scope);
                continue;
            }
            this.renderRecursive(curNode, scope);
        }
    }


    initRecursive(node) {
        if (typeof node === "undefined")
            node = this;

        if (typeof node.onKtInit === "function")
            node.onKtInit();

        for (let curNode of node.childNodes) {
            this.initRecursive(curNode);
        }

        if (typeof node.onAfterKtInit === "function")
            node.onAfterKtInit();
    }
}


var KT_DATA = [];


class KT_Template extends KT_Renderable
{
    constructor() {
        super();
        this.isRendered = false;
    }

    render(scope) {
        if (this.isRendered === false) {
            this.appendChild(this.state.origNode.cloneNode(true));
            this.isRendered = true;
        }

        for(let i = 0; i < this.state.parentTpls.length; i++) {
            this.state.parentTpls[i].render(scope);
        }
        console.log("Dump from tpl: ", this.dump());
    }

    /**
     *
     * @param targetNode
     * @return {KT_Template}
     */
    mount(targetNode) {


        return this;
    }

}

customElements.define("x-kt-template", KT_Template);

class KT_ForDirective extends KT_Renderable {

    constructor() {
        super();
        // console.log("construct", this.outerHTML);
        this.state.len = 0;
    }


    onKtInit() {

    }

    onAfterKtInit() {
        console.log("onKtInit()", this.outerHTML)
        let ktBlock = this.firstElementChild;

        if ( ! ktBlock instanceof KT_ForElement || typeof ktBlock !== "object") {
            console.error("Element child of x-kt-for must be x-kt-block in", this.outerHTML)
            throw "Element chilf of x-kt-for must be x-kt-block."
        }

        if ( ! this.hasAttribute("kt-id")) {
            this.setAttribute("kt-id", KT_DATA.length)
        }
        KT_DATA.push({origNode: ktBlock});

        for(let i = 0; i < this.children.length; i++)
            this.removeChild(this.children.item(0));
    }

    connectedCallback() {
    }

    disconnectedCallback() {
        console.log("disconnected", this.outerHTML);
    }

    render(scope) {
        let ktId = parseInt(this.getAttribute("kt-id"));
        let result = new RegExp("let (\\w+) of ([a-zA-Z0-9_.]+)");
        result = result.exec(this.getAttribute("for"));

        let selector = result[2];
        let target = result[1];

        let val = scope[selector];

        //console.log("render() scope: ", scope, "value:", val);

        // Create new elements
        for (let i = this.state.len; i < val.length; i++) {
            //console.log("append",  "to", this.outerHTML, this.state);
            let e = KT_DATA[ktId].origNode.cloneNode(true);
            // this.ownerDocument.adoptNode(e);

            this.append(e);
            this.state.len++;
        }


        for (let i = 0; i < val.length; i++) {
            //console.log ("Refresh", i, `with scope[${target}] = '${val[i]}'`);
            scope[target] = val[i];
            scope["idx"] = i;
            let curNode = this.children.item(i);
            //console.log ("node is", curNode, this.children);
            this.renderRecursive(curNode, scope);
        }


        for (let i = this.state.len; i > val.length; i--) {
            //    let c = this.state.parentTpls.pop();
            this.removeChild(this.lastElementChild);
            this.state.len--;
        }

    }

}

customElements.define("x-kt-for", KT_ForDirective);
class KT_ForElement extends KT_Renderable {

    constructor() {
        super();
        this.state.elements = [];
    }

    conntectedCallback() {

    }

    /*
    onKtInit() {
        this.state.ele
    }


    render(scope) {
        this.renderRecursive(this. scope);
    }


     */
}

customElements.define("x-kt-block", KT_ForElement);


class KtIf extends KT_Renderable {

    onAfterKtInit() {
        console.log("onKtInit()", this.outerHTML)
        let ktBlock = this.firstElementChild;

        if ( ! ktBlock instanceof KT_ForElement || typeof ktBlock !== "object") {
            console.error("Element child of x-kt-for must be x-kt-block in", this.outerHTML)
            throw "Element chilf of x-kt-for must be x-kt-block."
        }

        if ( ! this.hasAttribute("kt-id")) {
            this.setAttribute("kt-id", KT_DATA.length)
        }
        KT_DATA.push({origNode: ktBlock});

        for(let i = 0; i < this.children.length; i++)
            this.removeChild(this.children.item(0));
    }


    render(scope) {
        let stmt = this.getAttribute("stmt");

        let show = eval(stmt);

        if (show) {
            if (this.children.length === 0)
                this.appendChild(KT_DATA[this.getAttribute("kt-id")].origNode.cloneNode(true));

            this.renderRecursive(this.children.item(0), scope);
        }

        if ( ! show && this.hasChildNodes()) {

            for(let i = 0; i < this.children.length; i++)
                this.renderRecursive(this.children.item(0));
        }

    }


}

customElements.define("x-kt-if", KtIf);



class KTVal extends HTMLElement {



    render(scope) {
        let select = this.getAttribute("select");
        this.innerText = scope[select];
    }


}

customElements.define("x-kt-val", KTVal);


class Renderer {

    constructor() {
        /**
         *
         * @type {KT_ForDirective[]}
         */
        this.directives = [
            KT_ForDirective
        ]
    }


    /**
     *
     * @param {HTMLDivElement} node
     * @param {KT_Renderable} curTplElem
     * @private
     */
    _parse(node, curTplElem) {
        let tpl = null;
        let nodeOrig = null;
        console.log("run", node);


        if (node.hasAttribute("ngFor")) {
            nodeOrig = node;
            node = node.cloneNode(true);

            tpl = new KT_ForDirective();
            tpl.state.ngFor = node.getAttribute("ngFor");

            let elem = new KT_ForElement();
            //elem.appendChild(node);
            elem.state.origNode = node;

            tpl.state.origNode = elem;

            curTplElem.state.parentTpls.push(tpl);
            curTplElem = elem;
        }


        for (let i=0; i < node.children.length; i++) {
            this._parse(node.children.item(i), curTplElem);
        }
        if (tpl === null) {

        } else {
            nodeOrig.replaceWith(tpl);

        }
    }

    /**
     *
     * @param templateNode
     * @return {KT_Template}
     */
    getTemplate(templateNode) {
        let tpl = new KT_Template();

        if (templateNode instanceof HTMLTemplateElement) {
            let mainNode = templateNode.content.children.item(0);
            console.log("Template start", mainNode);

            templateNode.parentElement.ownerDocument.adoptNode(mainNode);

            tpl.state.origNode = mainNode.cloneNode(true);
            templateNode.parentElement.appendChild(tpl);
            this._parse(mainNode, tpl);

        } else {
            tpl.state.origNode = templateNode;
            this._parse(templateNode, tpl);
        }

        return tpl;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUva3QtcmVuZGVyYWJsZS5qcyIsImNvcmUva3QtdGVtcGxhdGUuanMiLCJmb3ItZGlyZWN0aXZlLmpzIiwia3QtYmxvY2suanMiLCJrdC1pZi5qcyIsImt0LXZhbC5qcyIsInJlbmRlcmVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2xEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2pGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQy9DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJrYXNpbWlyLXRwbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuY2xhc3MgS1RfUmVuZGVyYWJsZSBleHRlbmRzIEhUTUxFbGVtZW50XG57XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBvcmlnTm9kZTogbnVsbFxuICAgICAgICB9O1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBub2RlXG4gICAgICogQHBhcmFtIHNjb3BlXG4gICAgICovXG4gICAgcmVuZGVyUmVjdXJzaXZlKG5vZGUsIHNjb3BlKXtcbiAgICAgICAgaWYgKCAhIG5vZGUuaGFzQ2hpbGROb2RlcygpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcInJlbmRlclJlY3Vyc2l2ZVwiLCBub2RlKTtcbiAgICAgICAgZm9yIChsZXQgY3VyTm9kZSBvZiBub2RlLmNoaWxkTm9kZXMpIHtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXJOb2RlLnJlbmRlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgY3VyTm9kZS5yZW5kZXIoc2NvcGUpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZW5kZXJSZWN1cnNpdmUoY3VyTm9kZSwgc2NvcGUpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBpbml0UmVjdXJzaXZlKG5vZGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBub2RlID09PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgbm9kZSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBub2RlLm9uS3RJbml0ID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICBub2RlLm9uS3RJbml0KCk7XG5cbiAgICAgICAgZm9yIChsZXQgY3VyTm9kZSBvZiBub2RlLmNoaWxkTm9kZXMpIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdFJlY3Vyc2l2ZShjdXJOb2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2Ygbm9kZS5vbkFmdGVyS3RJbml0ID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICBub2RlLm9uQWZ0ZXJLdEluaXQoKTtcbiAgICB9XG59XG5cblxudmFyIEtUX0RBVEEgPSBbXTtcblxuIiwiY2xhc3MgS1RfVGVtcGxhdGUgZXh0ZW5kcyBLVF9SZW5kZXJhYmxlXG57XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuaXNSZW5kZXJlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJlbmRlcihzY29wZSkge1xuICAgICAgICBpZiAodGhpcy5pc1JlbmRlcmVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhpcy5hcHBlbmRDaGlsZCh0aGlzLnN0YXRlLm9yaWdOb2RlLmNsb25lTm9kZSh0cnVlKSk7XG4gICAgICAgICAgICB0aGlzLmlzUmVuZGVyZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMuc3RhdGUucGFyZW50VHBscy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZS5wYXJlbnRUcGxzW2ldLnJlbmRlcihzY29wZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coXCJEdW1wIGZyb20gdHBsOiBcIiwgdGhpcy5kdW1wKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHRhcmdldE5vZGVcbiAgICAgKiBAcmV0dXJuIHtLVF9UZW1wbGF0ZX1cbiAgICAgKi9cbiAgICBtb3VudCh0YXJnZXROb2RlKSB7XG5cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbn1cblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwieC1rdC10ZW1wbGF0ZVwiLCBLVF9UZW1wbGF0ZSk7XG4iLCJjbGFzcyBLVF9Gb3JEaXJlY3RpdmUgZXh0ZW5kcyBLVF9SZW5kZXJhYmxlIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcImNvbnN0cnVjdFwiLCB0aGlzLm91dGVySFRNTCk7XG4gICAgICAgIHRoaXMuc3RhdGUubGVuID0gMDtcbiAgICB9XG5cblxuICAgIG9uS3RJbml0KCkge1xuXG4gICAgfVxuXG4gICAgb25BZnRlckt0SW5pdCgpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJvbkt0SW5pdCgpXCIsIHRoaXMub3V0ZXJIVE1MKVxuICAgICAgICBsZXQga3RCbG9jayA9IHRoaXMuZmlyc3RFbGVtZW50Q2hpbGQ7XG5cbiAgICAgICAgaWYgKCAhIGt0QmxvY2sgaW5zdGFuY2VvZiBLVF9Gb3JFbGVtZW50IHx8IHR5cGVvZiBrdEJsb2NrICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRWxlbWVudCBjaGlsZCBvZiB4LWt0LWZvciBtdXN0IGJlIHgta3QtYmxvY2sgaW5cIiwgdGhpcy5vdXRlckhUTUwpXG4gICAgICAgICAgICB0aHJvdyBcIkVsZW1lbnQgY2hpbGYgb2YgeC1rdC1mb3IgbXVzdCBiZSB4LWt0LWJsb2NrLlwiXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoICEgdGhpcy5oYXNBdHRyaWJ1dGUoXCJrdC1pZFwiKSkge1xuICAgICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoXCJrdC1pZFwiLCBLVF9EQVRBLmxlbmd0aClcbiAgICAgICAgfVxuICAgICAgICBLVF9EQVRBLnB1c2goe29yaWdOb2RlOiBrdEJsb2NrfSk7XG5cbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICB0aGlzLnJlbW92ZUNoaWxkKHRoaXMuY2hpbGRyZW4uaXRlbSgwKSk7XG4gICAgfVxuXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgfVxuXG4gICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZGlzY29ubmVjdGVkXCIsIHRoaXMub3V0ZXJIVE1MKTtcbiAgICB9XG5cbiAgICByZW5kZXIoc2NvcGUpIHtcbiAgICAgICAgbGV0IGt0SWQgPSBwYXJzZUludCh0aGlzLmdldEF0dHJpYnV0ZShcImt0LWlkXCIpKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IG5ldyBSZWdFeHAoXCJsZXQgKFxcXFx3Kykgb2YgKFthLXpBLVowLTlfLl0rKVwiKTtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmV4ZWModGhpcy5nZXRBdHRyaWJ1dGUoXCJmb3JcIikpO1xuXG4gICAgICAgIGxldCBzZWxlY3RvciA9IHJlc3VsdFsyXTtcbiAgICAgICAgbGV0IHRhcmdldCA9IHJlc3VsdFsxXTtcblxuICAgICAgICBsZXQgdmFsID0gc2NvcGVbc2VsZWN0b3JdO1xuXG4gICAgICAgIC8vY29uc29sZS5sb2coXCJyZW5kZXIoKSBzY29wZTogXCIsIHNjb3BlLCBcInZhbHVlOlwiLCB2YWwpO1xuXG4gICAgICAgIC8vIENyZWF0ZSBuZXcgZWxlbWVudHNcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuc3RhdGUubGVuOyBpIDwgdmFsLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiYXBwZW5kXCIsICBcInRvXCIsIHRoaXMub3V0ZXJIVE1MLCB0aGlzLnN0YXRlKTtcbiAgICAgICAgICAgIGxldCBlID0gS1RfREFUQVtrdElkXS5vcmlnTm9kZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgICAgICAvLyB0aGlzLm93bmVyRG9jdW1lbnQuYWRvcHROb2RlKGUpO1xuXG4gICAgICAgICAgICB0aGlzLmFwcGVuZChlKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUubGVuKys7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nIChcIlJlZnJlc2hcIiwgaSwgYHdpdGggc2NvcGVbJHt0YXJnZXR9XSA9ICcke3ZhbFtpXX0nYCk7XG4gICAgICAgICAgICBzY29wZVt0YXJnZXRdID0gdmFsW2ldO1xuICAgICAgICAgICAgc2NvcGVbXCJpZHhcIl0gPSBpO1xuICAgICAgICAgICAgbGV0IGN1ck5vZGUgPSB0aGlzLmNoaWxkcmVuLml0ZW0oaSk7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nIChcIm5vZGUgaXNcIiwgY3VyTm9kZSwgdGhpcy5jaGlsZHJlbik7XG4gICAgICAgICAgICB0aGlzLnJlbmRlclJlY3Vyc2l2ZShjdXJOb2RlLCBzY29wZSk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLnN0YXRlLmxlbjsgaSA+IHZhbC5sZW5ndGg7IGktLSkge1xuICAgICAgICAgICAgLy8gICAgbGV0IGMgPSB0aGlzLnN0YXRlLnBhcmVudFRwbHMucG9wKCk7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUNoaWxkKHRoaXMubGFzdEVsZW1lbnRDaGlsZCk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlLmxlbi0tO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn1cblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwieC1rdC1mb3JcIiwgS1RfRm9yRGlyZWN0aXZlKTsiLCJjbGFzcyBLVF9Gb3JFbGVtZW50IGV4dGVuZHMgS1RfUmVuZGVyYWJsZSB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5zdGF0ZS5lbGVtZW50cyA9IFtdO1xuICAgIH1cblxuICAgIGNvbm50ZWN0ZWRDYWxsYmFjaygpIHtcblxuICAgIH1cblxuICAgIC8qXG4gICAgb25LdEluaXQoKSB7XG4gICAgICAgIHRoaXMuc3RhdGUuZWxlXG4gICAgfVxuXG5cbiAgICByZW5kZXIoc2NvcGUpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJSZWN1cnNpdmUodGhpcy4gc2NvcGUpO1xuICAgIH1cblxuXG4gICAgICovXG59XG5cbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcIngta3QtYmxvY2tcIiwgS1RfRm9yRWxlbWVudCk7IiwiXG5cbmNsYXNzIEt0SWYgZXh0ZW5kcyBLVF9SZW5kZXJhYmxlIHtcblxuICAgIG9uQWZ0ZXJLdEluaXQoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwib25LdEluaXQoKVwiLCB0aGlzLm91dGVySFRNTClcbiAgICAgICAgbGV0IGt0QmxvY2sgPSB0aGlzLmZpcnN0RWxlbWVudENoaWxkO1xuXG4gICAgICAgIGlmICggISBrdEJsb2NrIGluc3RhbmNlb2YgS1RfRm9yRWxlbWVudCB8fCB0eXBlb2Yga3RCbG9jayAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVsZW1lbnQgY2hpbGQgb2YgeC1rdC1mb3IgbXVzdCBiZSB4LWt0LWJsb2NrIGluXCIsIHRoaXMub3V0ZXJIVE1MKVxuICAgICAgICAgICAgdGhyb3cgXCJFbGVtZW50IGNoaWxmIG9mIHgta3QtZm9yIG11c3QgYmUgeC1rdC1ibG9jay5cIlxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCAhIHRoaXMuaGFzQXR0cmlidXRlKFwia3QtaWRcIikpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKFwia3QtaWRcIiwgS1RfREFUQS5sZW5ndGgpXG4gICAgICAgIH1cbiAgICAgICAgS1RfREFUQS5wdXNoKHtvcmlnTm9kZToga3RCbG9ja30pO1xuXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgdGhpcy5yZW1vdmVDaGlsZCh0aGlzLmNoaWxkcmVuLml0ZW0oMCkpO1xuICAgIH1cblxuXG4gICAgcmVuZGVyKHNjb3BlKSB7XG4gICAgICAgIGxldCBzdG10ID0gdGhpcy5nZXRBdHRyaWJ1dGUoXCJzdG10XCIpO1xuXG4gICAgICAgIGxldCBzaG93ID0gZXZhbChzdG10KTtcblxuICAgICAgICBpZiAoc2hvdykge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2hpbGRyZW4ubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQoS1RfREFUQVt0aGlzLmdldEF0dHJpYnV0ZShcImt0LWlkXCIpXS5vcmlnTm9kZS5jbG9uZU5vZGUodHJ1ZSkpO1xuXG4gICAgICAgICAgICB0aGlzLnJlbmRlclJlY3Vyc2l2ZSh0aGlzLmNoaWxkcmVuLml0ZW0oMCksIHNjb3BlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggISBzaG93ICYmIHRoaXMuaGFzQ2hpbGROb2RlcygpKSB7XG5cbiAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyUmVjdXJzaXZlKHRoaXMuY2hpbGRyZW4uaXRlbSgwKSk7XG4gICAgICAgIH1cblxuICAgIH1cblxuXG59XG5cbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcIngta3QtaWZcIiwgS3RJZik7XG4iLCJcblxuY2xhc3MgS1RWYWwgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG5cblxuXG4gICAgcmVuZGVyKHNjb3BlKSB7XG4gICAgICAgIGxldCBzZWxlY3QgPSB0aGlzLmdldEF0dHJpYnV0ZShcInNlbGVjdFwiKTtcbiAgICAgICAgdGhpcy5pbm5lclRleHQgPSBzY29wZVtzZWxlY3RdO1xuICAgIH1cblxuXG59XG5cbmN1c3RvbUVsZW1lbnRzLmRlZmluZShcIngta3QtdmFsXCIsIEtUVmFsKTsiLCJcblxuY2xhc3MgUmVuZGVyZXIge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAdHlwZSB7S1RfRm9yRGlyZWN0aXZlW119XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRpcmVjdGl2ZXMgPSBbXG4gICAgICAgICAgICBLVF9Gb3JEaXJlY3RpdmVcbiAgICAgICAgXVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0hUTUxEaXZFbGVtZW50fSBub2RlXG4gICAgICogQHBhcmFtIHtLVF9SZW5kZXJhYmxlfSBjdXJUcGxFbGVtXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcGFyc2Uobm9kZSwgY3VyVHBsRWxlbSkge1xuICAgICAgICBsZXQgdHBsID0gbnVsbDtcbiAgICAgICAgbGV0IG5vZGVPcmlnID0gbnVsbDtcbiAgICAgICAgY29uc29sZS5sb2coXCJydW5cIiwgbm9kZSk7XG5cblxuICAgICAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGUoXCJuZ0ZvclwiKSkge1xuICAgICAgICAgICAgbm9kZU9yaWcgPSBub2RlO1xuICAgICAgICAgICAgbm9kZSA9IG5vZGUuY2xvbmVOb2RlKHRydWUpO1xuXG4gICAgICAgICAgICB0cGwgPSBuZXcgS1RfRm9yRGlyZWN0aXZlKCk7XG4gICAgICAgICAgICB0cGwuc3RhdGUubmdGb3IgPSBub2RlLmdldEF0dHJpYnV0ZShcIm5nRm9yXCIpO1xuXG4gICAgICAgICAgICBsZXQgZWxlbSA9IG5ldyBLVF9Gb3JFbGVtZW50KCk7XG4gICAgICAgICAgICAvL2VsZW0uYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgICAgICAgICBlbGVtLnN0YXRlLm9yaWdOb2RlID0gbm9kZTtcblxuICAgICAgICAgICAgdHBsLnN0YXRlLm9yaWdOb2RlID0gZWxlbTtcblxuICAgICAgICAgICAgY3VyVHBsRWxlbS5zdGF0ZS5wYXJlbnRUcGxzLnB1c2godHBsKTtcbiAgICAgICAgICAgIGN1clRwbEVsZW0gPSBlbGVtO1xuICAgICAgICB9XG5cblxuICAgICAgICBmb3IgKGxldCBpPTA7IGkgPCBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLl9wYXJzZShub2RlLmNoaWxkcmVuLml0ZW0oaSksIGN1clRwbEVsZW0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cGwgPT09IG51bGwpIHtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm9kZU9yaWcucmVwbGFjZVdpdGgodHBsKTtcblxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGVtcGxhdGVOb2RlXG4gICAgICogQHJldHVybiB7S1RfVGVtcGxhdGV9XG4gICAgICovXG4gICAgZ2V0VGVtcGxhdGUodGVtcGxhdGVOb2RlKSB7XG4gICAgICAgIGxldCB0cGwgPSBuZXcgS1RfVGVtcGxhdGUoKTtcblxuICAgICAgICBpZiAodGVtcGxhdGVOb2RlIGluc3RhbmNlb2YgSFRNTFRlbXBsYXRlRWxlbWVudCkge1xuICAgICAgICAgICAgbGV0IG1haW5Ob2RlID0gdGVtcGxhdGVOb2RlLmNvbnRlbnQuY2hpbGRyZW4uaXRlbSgwKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVGVtcGxhdGUgc3RhcnRcIiwgbWFpbk5vZGUpO1xuXG4gICAgICAgICAgICB0ZW1wbGF0ZU5vZGUucGFyZW50RWxlbWVudC5vd25lckRvY3VtZW50LmFkb3B0Tm9kZShtYWluTm9kZSk7XG5cbiAgICAgICAgICAgIHRwbC5zdGF0ZS5vcmlnTm9kZSA9IG1haW5Ob2RlLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgICAgIHRlbXBsYXRlTm9kZS5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKHRwbCk7XG4gICAgICAgICAgICB0aGlzLl9wYXJzZShtYWluTm9kZSwgdHBsKTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHBsLnN0YXRlLm9yaWdOb2RlID0gdGVtcGxhdGVOb2RlO1xuICAgICAgICAgICAgdGhpcy5fcGFyc2UodGVtcGxhdGVOb2RlLCB0cGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRwbDtcbiAgICB9XG59Il19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
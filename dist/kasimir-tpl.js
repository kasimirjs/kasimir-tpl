/**
 * Infracamp's Kasimir Templates
 *
 * A no-dependency render on request
 *
 * @author Matthias Leuffen <m@tth.es>
 */

class KT_Renderable extends HTMLElement
{
    constructor() {
        super();
        this.state = {
            origNode: null
        };

    }

    /**
     *
     * @param {HTMLElement} node
     * @param scope
     */
    renderRecursive(node, scope){
        if ( ! node.hasChildNodes())
            return;
        // console.log("renderRecursive", node);
        if (typeof node.render === "function") {
             node.render(scope);
             return;
        }
        for (let curNode of node.childNodes) {
            this.renderRecursive(curNode, scope);
        }
    }


    initRecursive(node) {
        if (typeof node === "undefined")
            node = this;

        if (typeof node.onKtInit === "function")
            node.onKtInit();

        for (let curNode of node.childNodes) {

            this.initRecursive(curNode);
        }

        if (typeof node.onAfterKtInit === "function")
            node.onAfterKtInit();
    }
}




class KT_Template extends KT_Renderable
{
    constructor() {
        super();
        this.isRendered = false;
    }

    render(scope) {
        if (this.isRendered === false) {
            this.appendChild(this.state.origNode.cloneNode(true));
            this.isRendered = true;
        }

        for(let i = 0; i < this.state.parentTpls.length; i++) {
            this.state.parentTpls[i].render(scope);
        }
        console.log("Dump from tpl: ", this.dump());
    }

    /**
     *
     * @param targetNode
     * @return {KT_Template}
     */
    mount(targetNode) {


        return this;
    }

}

customElements.define("x-kt-template", KT_Template);

class KT_ForDirective extends KT_Renderable {

    constructor() {
        super();
        // console.log("construct", this.outerHTML);
        this.state.len = 0;
    }


    onKtInit() {

    }

    onAfterKtInit() {
        console.log("onKtInit()", this.outerHTML)
        let ktBlock = this.firstElementChild;

        if ( ! ktBlock instanceof KtBlock || typeof ktBlock !== "object") {
            console.error("Element child of x-kt-for must be x-kt-block in", this.outerHTML)
            throw "Element chilf of x-kt-for must be x-kt-block."
        }

        if ( ! this.hasAttribute("kt-id")) {
            this.setAttribute("kt-id", KT_DATA.length)
        }
        KT_DATA.push({origNode: ktBlock});

        for(let i = 0; i < this.children.length; i++)
            this.removeChild(this.children.item(0));
    }

    connectedCallback() {
    }

    disconnectedCallback() {
        console.log("disconnected", this.outerHTML);
    }

    render(scope) {
        let ktId = parseInt(this.getAttribute("kt-id"));
        let result = new RegExp("let (\\w+) of ([a-zA-Z0-9_.]+)");
        result = result.exec(this.getAttribute("for"));

        let selector = result[2];
        let target = result[1];

        let val = scope[selector];

        //console.log("render() scope: ", scope, "value:", val);

        // Create new elements
        for (let i = this.state.len; i < val.length; i++) {
            //console.log("append",  "to", this.outerHTML, this.state);
            let e = KT_DATA[ktId].origNode.cloneNode(true);
            // this.ownerDocument.adoptNode(e);

            this.append(e);
            this.state.len++;
        }


        for (let i = 0; i < val.length; i++) {
            //console.log ("Refresh", i, `with scope[${target}] = '${val[i]}'`);
            scope[target] = val[i];
            scope["idx"] = i;
            let curNode = this.children.item(i);
            //console.log ("node is", curNode, this.children);
            curNode.render(scope);
        }


        for (let i = this.state.len; i > val.length; i--) {
            //    let c = this.state.parentTpls.pop();
            this.removeChild(this.lastElementChild);
            this.state.len--;
        }

    }

}

customElements.define("x-kt-for", KT_ForDirective);
var KT_FN = {
    /**
     *
     * @param {HTMLElement} elem
     * @param {string} val
     * @param scope
     */
    "[class]": function(elem, val, scope) {
        "use strict";
        try {
            var classes = null;
            let e = "classes = " + val;
            let ret = eval(e);
            console.log("eval", e, "ret: ", ret, "classes:", classes);
        } catch (e) {
            throw e + " in [data] of " + elem.outerHTML;
        }
        for (let className in classes) {
            if ( ! classes.hasOwnProperty(className))
                continue;
            if (classes[className] === true) {
                elem.classList.add(className);
            } else {
                elem.classList.remove(className);
            }
        }
    },

    "[attr]": function (elem, val, scope) {
        try {
            var classes = null;
            let e = "classes = " + val;
            let ret = eval(e);
            console.log("eval", e, "ret: ", ret, "classes:", classes);
        } catch (e) {
            throw e + " in [data] of " + elem.outerHTML;
        }
        for (let className in classes) {
            if ( ! classes.hasOwnProperty(className))
                continue;
            if (classes[className] !== null) {
                elem.setAttribute(className, classes[className]);
            } else {
                elem.setAttribute(className, "");
            }
        }
    }
};
var KT_DATA = [];
class KtBlock extends KT_Renderable {

    constructor() {
        super();
        this.state.elements = [];
    }

    /**
     *
     * @param {HTMLElement} elem
     * @param scope
     */
    applyLogic(elem, scope) {
        for(let attribName of elem.getAttributeNames()) {
            if (typeof KT_FN[attribName] === "undefined")
                continue;
            let fn = KT_FN[attribName];
            fn(elem, elem.getAttribute(attribName), scope);
        }
    }


    render(scope) {
        "use strict";
        console.log("apply logic");
        for (let elem of this.children) {
            this.applyLogic(elem, scope);
            this.renderRecursive(elem, scope);
        }
    }
}

customElements.define("x-kt-block", KtBlock);


class KtIf extends KT_Renderable {

    onAfterKtInit() {
        console.log("onKtInit()", this.outerHTML)
        let ktBlock = this.firstElementChild;

        if ( ! ktBlock instanceof KtBlock || typeof ktBlock !== "object") {
            console.error("Element child of x-kt-for must be x-kt-block in", this.outerHTML)
            throw "Element chilf of x-kt-for must be x-kt-block."
        }

        if ( ! this.hasAttribute("kt-id")) {
            this.setAttribute("kt-id", KT_DATA.length)
        }
        KT_DATA.push({origNode: ktBlock});

        for(let i = 0; i < this.children.length; i++)
            this.removeChild(this.children.item(0));
    }


    render(scope) {
        let stmt = this.getAttribute("stmt");

        let show = eval(stmt);
        console.log("if eval:", stmt, "result:", show);
        if (show) {
            console.log("show children");
            if (this.children.length === 0)
                this.appendChild(KT_DATA[this.getAttribute("kt-id")].origNode.cloneNode(true));

            this.renderRecursive(this.children.item(0), scope);
        }

        if ( ! show && this.hasChildNodes()) {

            for(let i = 0; i < this.children.length; i++)
                this.renderRecursive(this.children.item(0));
        }

    }


}

customElements.define("x-kt-if", KtIf);

class KtInclude extends KT_Renderable {

    onAfterKtInit() {
        if ( ! this.hasAttribute("kt-id")) {
            this.setAttribute("kt-id", KT_DATA.length)
        }
        KT_DATA.push({origNode: null});


    }

    connectedCallback() {
        let src = this.getAttribute("src");

        let xhttp = new XMLHttpRequest();

        xhttp.open("GET", src);
        xhttp.onreadystatechange = () => {
            if (xhttp.readyState === 4) {
                if (xhttp.status >= 400) {
                    console.warn("Can't load '" + src + "': " + xhttp.responseText);
                    return;
                }
                this.innerHTML = xhttp.responseText;
                return;
            }

        };

        xhttp.send();
    }

    render(scope) {


    }


}

customElements.define("x-kt-include", KtInclude);



class KTVal extends HTMLElement {



    render(scope) {
        let select = this.getAttribute("select");
        this.innerText = scope[select];
    }


}

customElements.define("x-kt-val", KTVal);


class Renderer {

    constructor() {
        /**
         *
         * @type {KT_ForDirective[]}
         */
        this.directives = [
            KT_ForDirective
        ]
    }


    /**
     *
     * @param {HTMLDivElement} node
     * @param {KT_Renderable} curTplElem
     * @private
     */
    _parse(node, curTplElem) {
        let tpl = null;
        let nodeOrig = null;
        console.log("run", node);


        if (node.hasAttribute("ngFor")) {
            nodeOrig = node;
            node = node.cloneNode(true);

            tpl = new KT_ForDirective();
            tpl.state.ngFor = node.getAttribute("ngFor");

            let elem = new KT_ForElement();
            //elem.appendChild(node);
            elem.state.origNode = node;

            tpl.state.origNode = elem;

            curTplElem.state.parentTpls.push(tpl);
            curTplElem = elem;
        }


        for (let i=0; i < node.children.length; i++) {
            this._parse(node.children.item(i), curTplElem);
        }
        if (tpl === null) {

        } else {
            nodeOrig.replaceWith(tpl);

        }
    }

    /**
     *
     * @param templateNode
     * @return {KT_Template}
     */
    getTemplate(templateNode) {
        let tpl = new KT_Template();

        if (templateNode instanceof HTMLTemplateElement) {
            let mainNode = templateNode.content.children.item(0);
            console.log("Template start", mainNode);

            templateNode.parentElement.ownerDocument.adoptNode(mainNode);

            tpl.state.origNode = mainNode.cloneNode(true);
            templateNode.parentElement.appendChild(tpl);
            this._parse(mainNode, tpl);

        } else {
            tpl.state.origNode = templateNode;
            this._parse(templateNode, tpl);
        }

        return tpl;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
/**
 * Infracamp's Kasimir Templates
 *
 * A no-dependency render on request
 *
 * @author Matthias Leuffen <m@tth.es>
 */
class KT_ForDirective extends KT_Renderable {

    constructor(node) {
        super(node);
        this.ngFor = node.getAttribute("ngFor");
    }

    applies(node) {
        return node.hasAttribute("ngFor");
    }

    render(scope) {
        super.render(scope);
    }

}


/**
 *
 * @param templateSelector
 * @return {KasimirTemplate}
 */
export function kasimir_tpl(templateSelector) {
    let tplElem = null;
    if (typeof templateSelector === "string") {
        tplElem = document.querySelector(templateSelector);
        if (tplElem === null)
            throw "kasimir_tpl(): can't find element '" + templateSelector + "'";
    } else if (templateSelector instanceof HTMLElement) {
        tplElem = templateSelector;
    } else {
        throw "kasimir_tpl(): parameter1 is not a HtmlElement";
    }
    let renderer = new KasimirRenderer();
    return renderer.render(tplElem);
}



class KT_Renderable extends HTMLElement
{

    /**
     *
     * @param {HTMLElement} origNode
     */
    constructor(origNode) {
        super();

        this.origNode = origNode;
        /**
         *
         * @type {TplElem[]}
         */
        this.parentTpls = [];
    }

    render(scope) {
        for(let i = 0; i < this.parentTpls.length; i++) {
            this.parentTpls[i].render(scope);
        }
    }

}


class KT_Template extends KT_Renderable
{
    constructor(node) {
        super(node);
        this.isRendered = false;
    }

    render(scope) {
        if (this.isRendered === false) {
            $this.appendChild(this.origNode.cloneNode(true));
        }

        for(let i = 0; i < this.parentTpls.length; i++) {
            this.parentTpls[i].render(scope);
        }
    }

}

customElements.define("x-kt-template", KT_Template);


class Renderer {

    constructor() {
        /**
         *
         * @type {KT_ForDirective[]}
         */
        this.directives = [
            KT_ForDirective
        ]
    }


    /**
     *
     * @param {HTMLDivElement} node
     * @param {KT_Renderable} curTplElem
     * @private
     */
    _parse(node, curTplElem) {
        let tpl = null;
        let nodeOrig = null;
        console.log("run", node);

        for (let i = 0; i < this.directives.length; i++) {
            let directive = this.directives[i];
            if (directive.applies(node)) {
                nodeOrig = node;
                node = node.cloneNode(true);
                tpl = new directive(node);
                curTplElem.parentTpls.push(tpl);
                curTplElem = tpl;
            }
        }


        for (let i=0; i < node.children.length; i++) {
            this._parse(node.children.item(i), curTplElem);
        }

        if (tpl !== null)
            nodeOrig.replaceWith(tpl);
    }

    /**
     *
     * @param templateNode
     * @return {TplElem}
     */
    getTemplate(templateNode) {
        let tpl = new KT_Template(templateNode);
        this._parse(templateNode, tpl);
        return tpl;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvci1kaXJlY3RpdmUuanMiLCJmdW5jdGlvbnMuanMiLCJrdC1yZW5kZXJhYmxlLmpzIiwia3QtdGVtcGxhdGUuanMiLCJyZW5kZXJlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoia2FzaW1pci10cGwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBLVF9Gb3JEaXJlY3RpdmUgZXh0ZW5kcyBLVF9SZW5kZXJhYmxlIHtcblxuICAgIGNvbnN0cnVjdG9yKG5vZGUpIHtcbiAgICAgICAgc3VwZXIobm9kZSk7XG4gICAgICAgIHRoaXMubmdGb3IgPSBub2RlLmdldEF0dHJpYnV0ZShcIm5nRm9yXCIpO1xuICAgIH1cblxuICAgIGFwcGxpZXMobm9kZSkge1xuICAgICAgICByZXR1cm4gbm9kZS5oYXNBdHRyaWJ1dGUoXCJuZ0ZvclwiKTtcbiAgICB9XG5cbiAgICByZW5kZXIoc2NvcGUpIHtcbiAgICAgICAgc3VwZXIucmVuZGVyKHNjb3BlKTtcbiAgICB9XG5cbn0iLCJcblxuLyoqXG4gKlxuICogQHBhcmFtIHRlbXBsYXRlU2VsZWN0b3JcbiAqIEByZXR1cm4ge0thc2ltaXJUZW1wbGF0ZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGthc2ltaXJfdHBsKHRlbXBsYXRlU2VsZWN0b3IpIHtcbiAgICBsZXQgdHBsRWxlbSA9IG51bGw7XG4gICAgaWYgKHR5cGVvZiB0ZW1wbGF0ZVNlbGVjdG9yID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRwbEVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRlbXBsYXRlU2VsZWN0b3IpO1xuICAgICAgICBpZiAodHBsRWxlbSA9PT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IFwia2FzaW1pcl90cGwoKTogY2FuJ3QgZmluZCBlbGVtZW50ICdcIiArIHRlbXBsYXRlU2VsZWN0b3IgKyBcIidcIjtcbiAgICB9IGVsc2UgaWYgKHRlbXBsYXRlU2VsZWN0b3IgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICB0cGxFbGVtID0gdGVtcGxhdGVTZWxlY3RvcjtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBcImthc2ltaXJfdHBsKCk6IHBhcmFtZXRlcjEgaXMgbm90IGEgSHRtbEVsZW1lbnRcIjtcbiAgICB9XG4gICAgbGV0IHJlbmRlcmVyID0gbmV3IEthc2ltaXJSZW5kZXJlcigpO1xuICAgIHJldHVybiByZW5kZXJlci5yZW5kZXIodHBsRWxlbSk7XG59XG5cbiIsIlxuY2xhc3MgS1RfUmVuZGVyYWJsZSBleHRlbmRzIEhUTUxFbGVtZW50XG57XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG9yaWdOb2RlXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iob3JpZ05vZGUpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLm9yaWdOb2RlID0gb3JpZ05vZGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAdHlwZSB7VHBsRWxlbVtdfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wYXJlbnRUcGxzID0gW107XG4gICAgfVxuXG4gICAgcmVuZGVyKHNjb3BlKSB7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLnBhcmVudFRwbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMucGFyZW50VHBsc1tpXS5yZW5kZXIoc2NvcGUpO1xuICAgICAgICB9XG4gICAgfVxuXG59XG5cbiIsImNsYXNzIEtUX1RlbXBsYXRlIGV4dGVuZHMgS1RfUmVuZGVyYWJsZVxue1xuICAgIGNvbnN0cnVjdG9yKG5vZGUpIHtcbiAgICAgICAgc3VwZXIobm9kZSk7XG4gICAgICAgIHRoaXMuaXNSZW5kZXJlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJlbmRlcihzY29wZSkge1xuICAgICAgICBpZiAodGhpcy5pc1JlbmRlcmVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgJHRoaXMuYXBwZW5kQ2hpbGQodGhpcy5vcmlnTm9kZS5jbG9uZU5vZGUodHJ1ZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMucGFyZW50VHBscy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnRUcGxzW2ldLnJlbmRlcihzY29wZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwieC1rdC10ZW1wbGF0ZVwiLCBLVF9UZW1wbGF0ZSk7IiwiXG5cbmNsYXNzIFJlbmRlcmVyIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHR5cGUge0tUX0ZvckRpcmVjdGl2ZVtdfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kaXJlY3RpdmVzID0gW1xuICAgICAgICAgICAgS1RfRm9yRGlyZWN0aXZlXG4gICAgICAgIF1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtIVE1MRGl2RWxlbWVudH0gbm9kZVxuICAgICAqIEBwYXJhbSB7S1RfUmVuZGVyYWJsZX0gY3VyVHBsRWxlbVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3BhcnNlKG5vZGUsIGN1clRwbEVsZW0pIHtcbiAgICAgICAgbGV0IHRwbCA9IG51bGw7XG4gICAgICAgIGxldCBub2RlT3JpZyA9IG51bGw7XG4gICAgICAgIGNvbnNvbGUubG9nKFwicnVuXCIsIG5vZGUpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kaXJlY3RpdmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgZGlyZWN0aXZlID0gdGhpcy5kaXJlY3RpdmVzW2ldO1xuICAgICAgICAgICAgaWYgKGRpcmVjdGl2ZS5hcHBsaWVzKG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgbm9kZU9yaWcgPSBub2RlO1xuICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgICAgICAgICB0cGwgPSBuZXcgZGlyZWN0aXZlKG5vZGUpO1xuICAgICAgICAgICAgICAgIGN1clRwbEVsZW0ucGFyZW50VHBscy5wdXNoKHRwbCk7XG4gICAgICAgICAgICAgICAgY3VyVHBsRWxlbSA9IHRwbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICAgICAgZm9yIChsZXQgaT0wOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5fcGFyc2Uobm9kZS5jaGlsZHJlbi5pdGVtKGkpLCBjdXJUcGxFbGVtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cGwgIT09IG51bGwpXG4gICAgICAgICAgICBub2RlT3JpZy5yZXBsYWNlV2l0aCh0cGwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHRlbXBsYXRlTm9kZVxuICAgICAqIEByZXR1cm4ge1RwbEVsZW19XG4gICAgICovXG4gICAgZ2V0VGVtcGxhdGUodGVtcGxhdGVOb2RlKSB7XG4gICAgICAgIGxldCB0cGwgPSBuZXcgS1RfVGVtcGxhdGUodGVtcGxhdGVOb2RlKTtcbiAgICAgICAgdGhpcy5fcGFyc2UodGVtcGxhdGVOb2RlLCB0cGwpO1xuICAgICAgICByZXR1cm4gdHBsO1xuICAgIH1cbn0iXX0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvci1kaXJlY3RpdmUuanMiLCJmdW5jdGlvbnMuanMiLCJrdC1yZW5kZXJhYmxlLmpzIiwia3QtdGVtcGxhdGUuanMiLCJyZW5kZXJlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoia2FzaW1pci10cGwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBLVF9Gb3JEaXJlY3RpdmUgZXh0ZW5kcyBLVF9SZW5kZXJhYmxlIHtcblxuICAgIGNvbnN0cnVjdG9yKG5vZGUpIHtcbiAgICAgICAgc3VwZXIobm9kZSk7XG4gICAgICAgIHRoaXMubmdGb3IgPSBub2RlLmdldEF0dHJpYnV0ZShcIm5nRm9yXCIpO1xuICAgIH1cblxuICAgIGFwcGxpZXMobm9kZSkge1xuICAgICAgICByZXR1cm4gbm9kZS5oYXNBdHRyaWJ1dGUoXCJuZ0ZvclwiKTtcbiAgICB9XG5cbiAgICByZW5kZXIoc2NvcGUpIHtcbiAgICAgICAgc3VwZXIucmVuZGVyKHNjb3BlKTtcbiAgICB9XG5cbn0iLCJcblxuLyoqXG4gKlxuICogQHBhcmFtIHRlbXBsYXRlU2VsZWN0b3JcbiAqIEByZXR1cm4ge0thc2ltaXJUZW1wbGF0ZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGthc2ltaXJfdHBsKHRlbXBsYXRlU2VsZWN0b3IpIHtcbiAgICBsZXQgdHBsRWxlbSA9IG51bGw7XG4gICAgaWYgKHR5cGVvZiB0ZW1wbGF0ZVNlbGVjdG9yID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRwbEVsZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRlbXBsYXRlU2VsZWN0b3IpO1xuICAgICAgICBpZiAodHBsRWxlbSA9PT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IFwia2FzaW1pcl90cGwoKTogY2FuJ3QgZmluZCBlbGVtZW50ICdcIiArIHRlbXBsYXRlU2VsZWN0b3IgKyBcIidcIjtcbiAgICB9IGVsc2UgaWYgKHRlbXBsYXRlU2VsZWN0b3IgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICB0cGxFbGVtID0gdGVtcGxhdGVTZWxlY3RvcjtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBcImthc2ltaXJfdHBsKCk6IHBhcmFtZXRlcjEgaXMgbm90IGEgSHRtbEVsZW1lbnRcIjtcbiAgICB9XG4gICAgbGV0IHJlbmRlcmVyID0gbmV3IEthc2ltaXJSZW5kZXJlcigpO1xuICAgIHJldHVybiByZW5kZXJlci5yZW5kZXIodHBsRWxlbSk7XG59XG5cbiIsIlxuY2xhc3MgS1RfUmVuZGVyYWJsZSBleHRlbmRzIEhUTUxFbGVtZW50XG57XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG9yaWdOb2RlXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iob3JpZ05vZGUpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLm9yaWdOb2RlID0gb3JpZ05vZGU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAdHlwZSB7VHBsRWxlbVtdfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wYXJlbnRUcGxzID0gW107XG4gICAgfVxuXG4gICAgcmVuZGVyKHNjb3BlKSB7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLnBhcmVudFRwbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMucGFyZW50VHBsc1tpXS5yZW5kZXIoc2NvcGUpO1xuICAgICAgICB9XG4gICAgfVxuXG59XG5cbiIsImNsYXNzIEtUX1RlbXBsYXRlIGV4dGVuZHMgS1RfUmVuZGVyYWJsZVxue1xuICAgIGNvbnN0cnVjdG9yKG5vZGUpIHtcbiAgICAgICAgc3VwZXIobm9kZSk7XG4gICAgICAgIHRoaXMuaXNSZW5kZXJlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJlbmRlcihzY29wZSkge1xuICAgICAgICBpZiAodGhpcy5pc1JlbmRlcmVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgJHRoaXMuYXBwZW5kQ2hpbGQodGhpcy5vcmlnTm9kZS5jbG9uZU5vZGUodHJ1ZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMucGFyZW50VHBscy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnRUcGxzW2ldLnJlbmRlcihzY29wZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwieC1rdC10ZW1wbGF0ZVwiLCBLVF9UZW1wbGF0ZSk7IiwiXG5cbmNsYXNzIFJlbmRlcmVyIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHR5cGUge0tUX0ZvckRpcmVjdGl2ZVtdfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kaXJlY3RpdmVzID0gW1xuICAgICAgICAgICAgS1RfRm9yRGlyZWN0aXZlXG4gICAgICAgIF1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtIVE1MRGl2RWxlbWVudH0gbm9kZVxuICAgICAqIEBwYXJhbSB7S1RfUmVuZGVyYWJsZX0gY3VyVHBsRWxlbVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3BhcnNlKG5vZGUsIGN1clRwbEVsZW0pIHtcbiAgICAgICAgbGV0IHRwbCA9IG51bGw7XG4gICAgICAgIGxldCBub2RlT3JpZyA9IG51bGw7XG4gICAgICAgIGNvbnNvbGUubG9nKFwicnVuXCIsIG5vZGUpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kaXJlY3RpdmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgZGlyZWN0aXZlID0gdGhpcy5kaXJlY3RpdmVzW2ldO1xuICAgICAgICAgICAgaWYgKGRpcmVjdGl2ZS5hcHBsaWVzKG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgbm9kZU9yaWcgPSBub2RlO1xuICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgICAgICAgICB0cGwgPSBuZXcgZGlyZWN0aXZlKG5vZGUpO1xuICAgICAgICAgICAgICAgIGN1clRwbEVsZW0ucGFyZW50VHBscy5wdXNoKHRwbCk7XG4gICAgICAgICAgICAgICAgY3VyVHBsRWxlbSA9IHRwbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICAgICAgZm9yIChsZXQgaT0wOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5fcGFyc2Uobm9kZS5jaGlsZHJlbi5pdGVtKGkpLCBjdXJUcGxFbGVtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cGwgIT09IG51bGwpXG4gICAgICAgICAgICBub2RlT3JpZy5yZXBsYWNlV2l0aCh0cGwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHRlbXBsYXRlTm9kZVxuICAgICAqIEByZXR1cm4ge1RwbEVsZW19XG4gICAgICovXG4gICAgZ2V0VGVtcGxhdGUodGVtcGxhdGVOb2RlKSB7XG4gICAgICAgIGxldCB0cGwgPSBuZXcgS1RfVGVtcGxhdGUodGVtcGxhdGVOb2RlKTtcbiAgICAgICAgdGhpcy5fcGFyc2UodGVtcGxhdGVOb2RlLCB0cGwpO1xuICAgICAgICByZXR1cm4gdHBsO1xuICAgIH1cbn0iXX0=
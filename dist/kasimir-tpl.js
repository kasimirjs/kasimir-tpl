/**
 * Infracamp's Kasimir Templates
 *
 * A no-dependency render on request
 *
 * @author Matthias Leuffen <m@tth.es>
 */

class KT_Renderable extends HTMLElement
{
    constructor() {
        super();

        this.state = {
            parentTpls: []
        };
    }


    cloneNode(deep) {
        let state = this.state;
        let x = super.cloneNode(deep);
        x.state = state;
        return x;
    }

    dump() {
        let ret = {sub: [], elem: this};
        for (let cur of this.state.parentTpls)
            ret.sub.push(cur.dump());
        return ret;
    }

    render(scope) {
        for(let i = 0; i < this.state.parentTpls.length; i++) {
            this.state.parentTpls[i].render(scope);
        }
    }

}


class KT_Template extends KT_Renderable
{
    constructor() {
        super();
        this.isRendered = false;
    }

    render(scope) {
        if (this.isRendered === false) {
            this.appendChild(this.state.origNode.cloneNode(true));
            this.isRendered = true;
        }

        for(let i = 0; i < this.state.parentTpls.length; i++) {
            this.state.parentTpls[i].render(scope);
        }
        console.log("Dump from tpl: ", this.dump());
    }

    /**
     *
     * @param targetNode
     * @return {KT_Template}
     */
    mount(targetNode) {


        return this;
    }

}

customElements.define("x-kt-template", KT_Template);

class KT_ForDirective extends KT_Renderable {

    constructor() {
        super();
    }

    static applies(node) {
        return node.hasAttribute("ngFor");
    }

    /**
     *
     * @param {this} instane
     * @param {HTMLElement} node
     */
    static apply (instane, node) {
        let stmt = node.getAttribute("ngFor");



        console.log(result);

    }

    render(scope) {
        let result = new RegExp("let (\\w+) of ([a-zA-Z0-9_.]+)");
        result = result.exec(this.state.ngFor);

        let selector = result[2];
        let target = result[1];

        let val = scope[selector];

        console.log(scope, val);

        // Create new elements
        for (let i = this.state.parentTpls.length; i < val.length; i++) {
            let e = this.state.origNode.cloneNode(true);
            // this.ownerDocument.adoptNode(e);
            this.state.parentTpls.push(e);


            console.log("append", e, "to", this.outerHTML);
            this.append(e);

        }

        for (let i = 0; i < val.length; i++) {
            console.log ("Refresh", i, `with scope[${target}] = '${val[i]}'`);
            scope[target] = val[i];
            scope["idx"] = i;
            this.state.parentTpls[i].render(scope);
        }


        //for (let i = this.state.parentTpls.length; i > val.length; i--) {
        //    let c = this.state.parentTpls.pop();
        //    this.removeChild(c);
        //}

    }

}

customElements.define("x-kt-for-directive", KT_ForDirective);
class KT_ForElement extends KT_Renderable {

    constructor() {
        super();
        console.log("Forelement construct")
        this.isRendered = false;
    }

    render(scope) {
        //if (! this.isRendered) {

            this.appendChild(this.state.origNode.cloneNode(true));
            this.isRendered = true;
        //}
        super.render(scope);
        console.log("Render forelement", this.outerHTML, "in scope", scope)
    }

}

customElements.define("x-kt-for-element", KT_ForElement);


class Renderer {

    constructor() {
        /**
         *
         * @type {KT_ForDirective[]}
         */
        this.directives = [
            KT_ForDirective
        ]
    }


    /**
     *
     * @param {HTMLDivElement} node
     * @param {KT_Renderable} curTplElem
     * @private
     */
    _parse(node, curTplElem) {
        let tpl = null;
        let nodeOrig = null;
        console.log("run", node);


        if (node.hasAttribute("ngFor")) {
            nodeOrig = node;
            node = node.cloneNode(true);

            tpl = new KT_ForDirective();
            tpl.state.ngFor = node.getAttribute("ngFor");

            let elem = new KT_ForElement();
            //elem.appendChild(node);
            elem.state.origNode = node;

            tpl.state.origNode = elem;

            curTplElem.state.parentTpls.push(tpl);
            curTplElem = elem;
        }


        for (let i=0; i < node.children.length; i++) {
            this._parse(node.children.item(i), curTplElem);
        }
        if (tpl === null) {

        } else {
            nodeOrig.replaceWith(tpl);

        }
    }

    /**
     *
     * @param templateNode
     * @return {KT_Template}
     */
    getTemplate(templateNode) {
        let tpl = new KT_Template();

        if (templateNode instanceof HTMLTemplateElement) {
            let mainNode = templateNode.content.children.item(0);
            console.log("Template start", mainNode);

            templateNode.parentElement.ownerDocument.adoptNode(mainNode);

            tpl.state.origNode = mainNode.cloneNode(true);
            templateNode.parentElement.appendChild(tpl);
            this._parse(mainNode, tpl);

        } else {
            tpl.state.origNode = templateNode;
            this._parse(templateNode, tpl);
        }

        return tpl;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,